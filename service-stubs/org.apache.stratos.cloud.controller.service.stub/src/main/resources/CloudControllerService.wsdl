<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<?xml version="1.0" encoding="UTF-8"?><wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://impl.services.controller.cloud.stratos.apache.org" xmlns:ax27="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax23="http://domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax24="http://common.stratos.apache.org/xsd" xmlns:ax21="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ax212="http://topology.domain.messaging.stratos.apache.org/xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:ax210="http://domain.common.stratos.apache.org/xsd" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://impl.services.controller.cloud.stratos.apache.org">
    <wsdl:types>
        <xs:schema xmlns:ax29="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax213="http://topology.domain.messaging.stratos.apache.org/xsd" xmlns:ax26="http://domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax22="http://exception.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://impl.services.controller.cloud.stratos.apache.org">
            <xs:import namespace="http://exception.controller.cloud.stratos.apache.org/xsd"/>
            <xs:import namespace="http://domain.controller.cloud.stratos.apache.org/xsd"/>
            <xs:import namespace="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd"/>
            <xs:import namespace="http://topology.domain.messaging.stratos.apache.org/xsd"/>
            <xs:element name="getCartridges">
                <xs:complexType>
                    <xs:sequence/>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax21:InvalidCartridgeDefinitionException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax21:InvalidIaasProviderException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeAlreadyExistsException" nillable="true" type="ax21:CartridgeAlreadyExistsException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax26:CartridgeConfig"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeTypeException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeTypeException" nillable="true" type="ax21:InvalidCartridgeTypeException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeCartridge">
=======
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://impl.services.controller.cloud.stratos.apache.org" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ax228="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ax231="http://topology.domain.messaging.stratos.apache.org/xsd" xmlns:ax222="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:ax224="http://domain.controller.cloud.stratos.apache.org/xsd" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:ax226="http://common.stratos.apache.org/xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://impl.services.controller.cloud.stratos.apache.org">
=======
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://impl.services.controller.cloud.stratos.apache.org" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ax228="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax233="http://topology.domain.messaging.stratos.apache.org/xsd" xmlns:ns1="http://org.apache.axis2/xsd" xmlns:ax222="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:ax231="http://domain.common.stratos.apache.org/xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:ax224="http://domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax226="http://common.stratos.apache.org/xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://impl.services.controller.cloud.stratos.apache.org">
>>>>>>> fixing merging issues
    <wsdl:documentation>CloudControllerService</wsdl:documentation>
    <wsdl:types>
        <xs:schema xmlns:ax230="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd" xmlns:ax223="http://exception.controller.cloud.stratos.apache.org/xsd" xmlns:ax234="http://topology.domain.messaging.stratos.apache.org/xsd" xmlns:ax225="http://domain.controller.cloud.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://impl.services.controller.cloud.stratos.apache.org">
            <xs:import namespace="http://exception.controller.cloud.stratos.apache.org/xsd"></xs:import>
            <xs:import namespace="http://domain.controller.cloud.stratos.apache.org/xsd"></xs:import>
            <xs:import namespace="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd"></xs:import>
            <xs:import namespace="http://topology.domain.messaging.stratos.apache.org/xsd"></xs:import>
            <xs:element name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="DeploymentPolicyNotExistsException" nillable="true" type="ax222:DeploymentPolicyNotExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPolicy">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="deploymentPolicyID" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPolicyResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="getDeploymentPolicies">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPoliciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax222:InvalidCartridgeDefinitionException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax222:InvalidIaasProviderException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeAlreadyExistsException" nillable="true" type="ax222:CartridgeAlreadyExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax224:CartridgeConfig"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeDefinitionNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeDefinitionNotExistsException" nillable="true" type="ax222:CartridgeDefinitionNotExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax224:CartridgeConfig"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridges">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="CloudControllerServiceCartridgeDefinitionNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeDefinitionNotExistsException" nillable="true" type="ax21:CartridgeDefinitionNotExistsException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax26:CartridgeConfig"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidServiceGroupException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidServiceGroupException" nillable="true" type="ax21:InvalidServiceGroupException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroup">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax26:ServiceGroup"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addServiceGroup">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="servicegroup" nillable="true" type="ax26:ServiceGroup"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeServiceGroup">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getClusterContext">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getClusterContextResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax26:ClusterContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NonExistingKubernetesClusterException" nillable="true" type="ax21:NonExistingKubernetesClusterException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesHostException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NonExistingKubernetesHostException" nillable="true" type="ax21:NonExistingKubernetesHostException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesHostId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidKubernetesClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesClusterException" nillable="true" type="ax21:InvalidKubernetesClusterException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesCluster" nillable="true" type="ax29:KubernetesCluster"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax29:KubernetesCluster"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClusters">
                <xs:complexType>
                    <xs:sequence/>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClustersResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax29:KubernetesCluster"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeNotFoundException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeNotFoundException" nillable="true" type="ax21:CartridgeNotFoundException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCloudControllerException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CloudControllerException" nillable="true" type="ax21:CloudControllerException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstance">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="instanceContext" nillable="true" type="ax26:InstanceContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstanceResponse">
=======
            <xs:element name="getCartridgesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
=======
            <xs:element name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="DeploymentPolicyNotExistsException" nillable="true" type="ax222:DeploymentPolicyNotExistsException"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPolicy">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="InvalidCartridgeTypeException" nillable="true" type="ax222:InvalidCartridgeTypeException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNetworkPartitionAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NetworkPartitionAlreadyExistsException" nillable="true" type="ax222:NetworkPartitionAlreadyExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addNetworkPartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="networkPartition" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartitions">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartitionsResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartition">
=======
            <xs:element name="getDeploymentPolicies">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPoliciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax225:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax228:InvalidCartridgeDefinitionException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax228:InvalidIaasProviderException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeDefinitionNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeDefinitionNotExistsException" nillable="true" type="ax228:CartridgeDefinitionNotExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax225:CartridgeConfig"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridges">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgesResponse">
=======
            <xs:element name="CloudControllerServiceInvalidMemberException">
>>>>>>> fixing merging issues
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidMemberException" nillable="true" type="ax222:InvalidMemberException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeTypeException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeTypeException" nillable="true" type="ax222:InvalidCartridgeTypeException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCloudControllerException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CloudControllerException" nillable="true" type="ax222:CloudControllerException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstance">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPolicies">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getDeploymentPoliciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidCartridgeDefinitionException" nillable="true" type="ax222:InvalidCartridgeDefinitionException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidIaasProviderException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidIaasProviderException" nillable="true" type="ax222:InvalidIaasProviderException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeDefinitionNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeDefinitionNotExistsException" nillable="true" type="ax222:CartridgeDefinitionNotExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax224:CartridgeConfig"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridges">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNetworkPartitionAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NetworkPartitionAlreadyExistsException" nillable="true" type="ax222:NetworkPartitionAlreadyExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addNetworkPartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="networkPartition" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartitions">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartitionsResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getNetworkPartitionResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNetworkPartitionNotExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NetworkPartitionNotExistsException" nillable="true" type="ax222:NetworkPartitionNotExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeNetworkPartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateNetworkPartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="networkPartition" nillable="true" type="ax224:NetworkPartition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidKubernetesHostException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesHostException" nillable="true" type="ax222:InvalidKubernetesHostException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NonExistingKubernetesClusterException" nillable="true" type="ax222:NonExistingKubernetesClusterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="kubernetesHost" nillable="true" type="ax228:KubernetesHost"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidKubernetesMasterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesMasterException" nillable="true" type="ax222:InvalidKubernetesMasterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesMasterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NonExistingKubernetesMasterException" nillable="true" type="ax222:NonExistingKubernetesMasterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesMaster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesMaster" nillable="true" type="ax228:KubernetesMaster"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesMasterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesHostException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="NonExistingKubernetesHostException" nillable="true" type="ax222:NonExistingKubernetesHostException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesHost" nillable="true" type="ax228:KubernetesHost"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCartridgeAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeAlreadyExistsException" nillable="true" type="ax222:CartridgeAlreadyExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addCartridge">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeConfig" nillable="true" type="ax224:CartridgeConfig"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidKubernetesClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesClusterException" nillable="true" type="ax222:InvalidKubernetesClusterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesCluster" nillable="true" type="ax228:KubernetesCluster"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax228:KubernetesCluster"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesHostId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHostResponse">
<<<<<<< HEAD
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidServiceGroupException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidServiceGroupException" nillable="true" type="ax222:InvalidServiceGroupException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroups">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroupsResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridges">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridgesResponse">
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="getKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax230:KubernetesCluster"></xs:element>
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax233:KubernetesCluster"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesHostId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
=======
            <xs:element name="getServiceGroupDependencies">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupDependenciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:Dependencies"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="removeKubernetesClusterResponse">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax26:MemberContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="CloudControllerServiceInvalidMemberException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidMemberException" nillable="true" type="ax21:InvalidMemberException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstance">
=======
            <xs:element name="removeKubernetesHost">
=======
            <xs:element name="CloudControllerServiceCartridgeNotFoundException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeNotFoundException" nillable="true" type="ax222:CartridgeNotFoundException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceCloudControllerException">
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
>>>>>>> fixing merging issues
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:element name="removeKubernetesHostResponse">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="registerService">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax26:Registrant"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="registerServiceResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroups">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroupsResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridges">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridgesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupDependencies">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupDependenciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax26:Dependencies"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidPartitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidPartitionException" nillable="true" type="ax21:InvalidPartitionException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validatePartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="partition" nillable="true" type="ax26:Partition"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validatePartitionResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validateDeploymentPolicy">
=======
            <xs:element name="CloudControllerServiceInvalidServiceGroupException">
=======
            <xs:element name="startInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="instanceContexts" nillable="true" type="ax224:InstanceContext"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstancesResponse">
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="InvalidServiceGroupException" nillable="true" type="ax222:InvalidServiceGroupException"></xs:element>
=======
                        <xs:element minOccurs="0" name="InvalidServiceGroupException" nillable="true" type="ax228:InvalidServiceGroupException"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:MemberContext"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidClusterException" nillable="true" type="ax222:InvalidClusterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgeInfo">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgeInfoResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:CartridgeInfo"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidPartitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidPartitionException" nillable="true" type="ax222:InvalidPartitionException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validateDeploymentPolicy">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:Dependencies"></xs:element>
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax225:Dependencies"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax224:Partition"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
            <xs:element name="CloudControllerServiceCartridgeNotFoundException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="CartridgeNotFoundException" nillable="true" type="ax222:CartridgeNotFoundException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstance">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="instanceContext" nillable="true" type="ax224:InstanceContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstanceResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:MemberContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidServiceGroupException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidServiceGroupException" nillable="true" type="ax222:InvalidServiceGroupException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroups">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupSubGroupsResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridges">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupCartridgesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="xs:string"></xs:element>
>>>>>>> fixing merging issues
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupDependencies">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupDependenciesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:Dependencies"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="instanceContexts" nillable="true" type="ax224:InstanceContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstancesResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax224:MemberContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidClusterException" nillable="true" type="ax222:InvalidClusterException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:element name="getCartridgeInfo">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax26:Partition"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="validateDeploymentPolicyResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="instanceContexts" nillable="true" type="ax26:InstanceContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstancesResponse">
=======
            <xs:element name="getCartridgeInfoResponse">
=======
            <xs:element name="CloudControllerServiceApplicationClusterRegistrationException">
=======
            <xs:element name="getCartridgeInfo">
>>>>>>> fixing merging issues
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="createApplicationClusters">
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
            <xs:element name="getCartridgeInfoResponse">
>>>>>>> fixing merging issues
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:CartridgeInfo"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidPartitionException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidPartitionException" nillable="true" type="ax222:InvalidPartitionException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validateDeploymentPolicy">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax224:Partition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validateDeploymentPolicyResponse">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax26:MemberContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="CloudControllerServiceInvalidClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidClusterException" nillable="true" type="ax21:InvalidClusterException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstances">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateClusterStatus">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="serviceName" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="status" nillable="true" type="ax212:ClusterStatus"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceUnregisteredClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="UnregisteredClusterException" nillable="true" type="ax21:UnregisteredClusterException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="unregisterService">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgeInfo">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getCartridgeInfoResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax26:CartridgeInfo"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceApplicationClusterRegistrationException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="ApplicationClusterRegistrationException" nillable="true" type="ax21:ApplicationClusterRegistrationException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="createApplicationClusters">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="appId" nillable="true" type="xs:string"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="appClustersContexts" nillable="true" type="ax26:ApplicationClusterContext"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceClusterInstanceCreationException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="ClusterInstanceCreationException" nillable="true" type="ax21:ClusterInstanceCreationException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="createClusterInstance">
=======
            <xs:element name="validatePartition">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="partition" nillable="true" type="ax224:Partition"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="validatePartitionResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getClusterContext">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getClusterContextResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:ClusterContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateClusterStatus">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="serviceName" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="status" nillable="true" type="ax233:ClusterStatus"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceApplicationClusterRegistrationException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="ApplicationClusterRegistrationException" nillable="true" type="ax222:ApplicationClusterRegistrationException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="createApplicationClusters">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="appId" nillable="true" type="xs:string"></xs:element>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="appClustersContexts" nillable="true" type="ax224:ApplicationClusterContext"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceClusterInstanceCreationException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="ClusterInstanceCreationException" nillable="true" type="ax222:ClusterInstanceCreationException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="createClusterInstance">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="serviceType" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="alias" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="partitionId" nillable="true" type="xs:string"></xs:element>
                        <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClusters">
                <xs:complexType>
                    <xs:sequence></xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getKubernetesClustersResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax228:KubernetesCluster"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getMasterForKubernetesCluster">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="serviceType" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="alias" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="partitionId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="getMasterForKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getMasterForKubernetesClusterResponse">
=======
            <xs:element name="getMasterForKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax228:KubernetesMaster"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getHostsForKubernetesCluster">
>>>>>>> Add deployment policy
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax29:KubernetesMaster"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="getHostsForKubernetesCluster">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getHostsForKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax29:KubernetesHost"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidKubernetesHostException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesHostException" nillable="true" type="ax21:InvalidKubernetesHostException"/>
=======
            <xs:element name="getHostsForKubernetesClusterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="return" nillable="true" type="ax228:KubernetesHost"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceDeploymentPolicyAlreadyExistsException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="DeploymentPolicyAlreadyExistsException" nillable="true" type="ax222:DeploymentPolicyAlreadyExistsException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceInvalidDeploymentPolicyException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidDeploymentPolicyException" nillable="true" type="ax222:InvalidDeploymentPolicyException"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addDeployementPolicy">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="deploymentPolicy" nillable="true" type="ax224:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateDeployementPolicy">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="deploymentPolicy" nillable="true" type="ax224:DeploymentPolicy"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="removeDeployementPolicy">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="deploymentPolicyID" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addServiceGroup">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesHost">
=======
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:element name="CloudControllerServiceUnregisteredClusterException">
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                        <xs:element minOccurs="0" name="kubernetesHost" nillable="true" type="ax29:KubernetesHost"/>
=======
                        <xs:element minOccurs="0" name="UnregisteredClusterException" nillable="true" type="ax222:UnregisteredClusterException"></xs:element>
<<<<<<< HEAD
>>>>>>> Add deployment policy
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="addKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
=======
=======
            <xs:element name="getDeploymentPolicy">
=======
                        <xs:element minOccurs="0" name="servicegroup" nillable="true" type="ax224:ServiceGroup"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroup">
>>>>>>> fixing merging issues
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="getServiceGroupResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:ServiceGroup"></xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceUnregisteredClusterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="UnregisteredClusterException" nillable="true" type="ax222:UnregisteredClusterException"></xs:element>
<<<<<<< HEAD
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="terminateInstance">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="updateKubernetesHost">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="kubernetesHost" nillable="true" type="ax29:KubernetesHost"/>
=======
            <xs:element name="startInstance">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="instanceContext" nillable="true" type="ax224:InstanceContext"></xs:element>
=======
                        <xs:element minOccurs="0" name="instanceContext" nillable="true" type="ax225:InstanceContext"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
                        <xs:element minOccurs="0" name="instanceContext" nillable="true" type="ax224:InstanceContext"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="startInstanceResponse">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:MemberContext"></xs:element>
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax225:MemberContext"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:MemberContext"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
>>>>>>> fixing merging issues
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="unregisterService">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="servicegroup" nillable="true" type="ax224:ServiceGroup"></xs:element>
<<<<<<< HEAD
>>>>>>> Add deployment policy
=======
=======
                        <xs:element minOccurs="0" name="servicegroup" nillable="true" type="ax225:ServiceGroup"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                        <xs:element minOccurs="0" name="servicegroup" nillable="true" type="ax224:ServiceGroup"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
                        <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
>>>>>>> fixing merging issues
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesHostResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
<<<<<<< HEAD
            <xs:element name="CloudControllerServiceInvalidKubernetesMasterException">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="InvalidKubernetesMasterException" nillable="true" type="ax21:InvalidKubernetesMasterException"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="CloudControllerServiceNonExistingKubernetesMasterException">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="NonExistingKubernetesMasterException" nillable="true" type="ax21:NonExistingKubernetesMasterException"/>
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:ServiceGroup"></xs:element>
>>>>>>> Add deployment policy
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:ServiceGroup"></xs:element>
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax225:ServiceGroup"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                        <xs:element minOccurs="0" name="return" nillable="true" type="ax224:ServiceGroup"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesMaster">
                <xs:complexType>
                    <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                        <xs:element minOccurs="0" name="kubernetesMaster" nillable="true" type="ax29:KubernetesMaster"/>
=======
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax224:Registrant"></xs:element>
>>>>>>> Add deployment policy
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax224:Registrant"></xs:element>
=======
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax225:Registrant"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax224:Registrant"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
            <xs:element name="registerService">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="registrant" nillable="true" type="ax224:Registrant"></xs:element>
>>>>>>> fixing merging issues
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="updateKubernetesMasterResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:schema>
        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://topology.domain.messaging.stratos.apache.org/xsd">
            <xs:complexType abstract="true" name="ClusterStatus">
                <xs:complexContent>
                    <xs:extension base="xs:Enum">
                        <xs:sequence>
                            <xs:element minOccurs="0" name="code" type="xs:int"/>
                        </xs:sequence>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
        </xs:schema>
        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://common.stratos.apache.org/xsd">
            <xs:complexType name="Properties">
                <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax24:Property"/>
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax226:Property"></xs:element>
>>>>>>> Add deployment policy
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax226:Property"></xs:element>
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax229:Property"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax226:Property"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax226:Property"></xs:element>
>>>>>>> fixing merging issues
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Property">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://exception.controller.cloud.stratos.apache.org/xsd">
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
            <xs:complexType name="DeploymentPolicyNotExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
>>>>>>> Add deployment policy
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
            <xs:complexType name="DeploymentPolicyNotExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
            <xs:complexType name="InvalidCartridgeDefinitionException">
=======
            <xs:complexType name="DeploymentPolicyNotExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidMemberException">
>>>>>>> fixing merging issues
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidCartridgeTypeException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:complexType name="CartridgeAlreadyExistsException">
<<<<<<< HEAD
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="InvalidCartridgeTypeException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
=======
                <xs:sequence></xs:sequence>
>>>>>>> Add deployment policy
            </xs:complexType>
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
            <xs:complexType name="CartridgeDefinitionNotExistsException">
=======
            <xs:complexType name="DeploymentPolicyNotExistsException">
                <xs:sequence></xs:sequence>
=======
            <xs:complexType name="CloudControllerException">
                <xs:complexContent>
                    <xs:extension base="xs:RuntimeException">
                        <xs:sequence></xs:sequence>
                    </xs:extension>
                </xs:complexContent>
>>>>>>> fixing merging issues
            </xs:complexType>
            <xs:complexType name="InvalidCartridgeDefinitionException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidIaasProviderException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="CartridgeDefinitionNotExistsException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="InvalidCartridgeTypeException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="NonExistingKubernetesClusterException">
=======
=======
>>>>>>> fixing merging issues
            <xs:complexType name="NetworkPartitionAlreadyExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
            <xs:complexType name="NetworkPartitionNotExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidKubernetesHostException">
>>>>>>> Add deployment policy
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="NonExistingKubernetesHostException">
=======
            <xs:complexType name="NonExistingKubernetesClusterException">
>>>>>>> Add deployment policy
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidKubernetesClusterException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="CartridgeNotFoundException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="CloudControllerException">
                <xs:complexContent>
                    <xs:extension base="xs:RuntimeException">
                        <xs:sequence/>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
            <xs:complexType name="InvalidMemberException">
=======
            <xs:complexType name="InvalidKubernetesMasterException">
>>>>>>> Add deployment policy
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="NonExistingKubernetesMasterException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="InvalidClusterException">
=======
            <xs:complexType name="NonExistingKubernetesHostException">
>>>>>>> Add deployment policy
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:complexType name="UnregisteredClusterException">
=======
=======
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
            <xs:complexType name="CartridgeAlreadyExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
            <xs:complexType name="CartridgeAlreadyExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
            <xs:complexType name="CartridgeAlreadyExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
>>>>>>> fixing merging issues
            <xs:complexType name="InvalidKubernetesClusterException">
>>>>>>> Add deployment policy
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:complexType name="ApplicationClusterRegistrationException">
=======
            <xs:complexType name="InvalidServiceGroupException">
>>>>>>> Add deployment policy
=======
            <xs:complexType name="CartridgeNotFoundException">
>>>>>>> fixing merging issues
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
<<<<<<< HEAD
            <xs:complexType name="ClusterInstanceCreationException">
=======
            <xs:complexType name="CartridgeNotFoundException">
>>>>>>> Add deployment policy
=======
            <xs:complexType name="InvalidServiceGroupException">
>>>>>>> fixing merging issues
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidClusterException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidPartitionException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="ApplicationClusterRegistrationException">
                <xs:sequence>
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://domain.common.stratos.apache.org/xsd">
            <xs:complexType name="NameValuePair">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema xmlns:ax28="http://common.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd">
            <xs:import namespace="http://common.stratos.apache.org/xsd"/>
            <xs:complexType name="KubernetesCluster">
                <xs:sequence>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="kubernetesHosts" nillable="true" type="ax27:KubernetesHost"/>
                    <xs:element minOccurs="0" name="kubernetesMaster" nillable="true" type="ax27:KubernetesMaster"/>
                    <xs:element minOccurs="0" name="portRange" nillable="true" type="ax27:PortRange"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax28:Properties"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="KubernetesHost">
                <xs:sequence>
                    <xs:element minOccurs="0" name="hostId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostname" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="privateIPAddress" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax28:Properties"/>
                    <xs:element minOccurs="0" name="publicIPAddress" nillable="true" type="xs:string"/>
=======
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="ClusterInstanceCreationException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="DeploymentPolicyAlreadyExistsException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
            <xs:complexType name="InvalidDeploymentPolicyException">
                <xs:sequence></xs:sequence>
            </xs:complexType>
            <xs:complexType name="UnregisteredClusterException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="message" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://domain.common.stratos.apache.org/xsd">
            <xs:complexType name="NameValuePair">
                <xs:sequence>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="value" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema xmlns:ax229="http://common.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://kubernetes.domain.controller.cloud.stratos.apache.org/xsd">
            <xs:import namespace="http://common.stratos.apache.org/xsd"></xs:import>
            <xs:complexType name="KubernetesHost">
                <xs:sequence>
                    <xs:element minOccurs="0" name="hostId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostname" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="privateIPAddress" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
<<<<<<< HEAD
>>>>>>> Add deployment policy
=======
                    <xs:element minOccurs="0" name="publicIPAddress" nillable="true" type="xs:string"></xs:element>
>>>>>>> fixing merging issues
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="KubernetesMaster">
                <xs:complexContent>
<<<<<<< HEAD
                    <xs:extension base="ax27:KubernetesHost">
=======
                    <xs:extension base="ax228:KubernetesHost">
>>>>>>> Add deployment policy
                        <xs:sequence>
                            <xs:element minOccurs="0" name="endpoint" nillable="true" type="xs:string"/>
                        </xs:sequence>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
            <xs:complexType name="KubernetesCluster">
                <xs:sequence>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="kubernetesHosts" nillable="true" type="ax228:KubernetesHost"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesMaster" nillable="true" type="ax228:KubernetesMaster"></xs:element>
                    <xs:element minOccurs="0" name="portRange" nillable="true" type="ax228:PortRange"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="PortRange">
                <xs:sequence>
                    <xs:element minOccurs="0" name="lower" type="xs:int"></xs:element>
                    <xs:element minOccurs="0" name="upper" type="xs:int"></xs:element>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema xmlns:ax232="http://domain.common.stratos.apache.org/xsd" xmlns:ax227="http://common.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://domain.controller.cloud.stratos.apache.org/xsd">
            <xs:import namespace="http://common.stratos.apache.org/xsd"></xs:import>
            <xs:import namespace="http://domain.common.stratos.apache.org/xsd"></xs:import>
            <xs:complexType name="DeploymentPolicy">
                <xs:sequence>
                    <xs:element minOccurs="0" name="deploymentPolicyID" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="networkPartitionsRef" nillable="true" type="ax224:NetworkPartitionRef"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="NetworkPartitionRef">
                <xs:sequence>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="partitionAlgo" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax224:PartitionRef"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="PartitionRef">
                <xs:sequence>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="max" type="xs:int"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="CartridgeConfig">
                <xs:sequence>
                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="category" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="deployerType" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="exportingProperties" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="iaasConfigs" nillable="true" type="ax224:IaasConfig"></xs:element>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax224:LoadbalancerConfig"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="metadataKeys" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax224:Persistence"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax224:PortMapping"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="tenantPartitions" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="IaasConfig">
                <xs:sequence>
                    <xs:element minOccurs="0" name="className" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="credential" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="identity" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="imageId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="networkInterfaces" nillable="true" type="ax224:NetworkInterfaces"></xs:element>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:base64Binary"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="NetworkInterfaces">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="networkInterfaces" nillable="true" type="ax224:NetworkInterface"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="NetworkInterface">
                <xs:sequence>
                    <xs:element minOccurs="0" name="fixedIp" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="floatingNetworks" nillable="true" type="ax224:FloatingNetworks"></xs:element>
                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="portUuid" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="FloatingNetworks">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="floatingNetworks" nillable="true" type="ax224:FloatingNetwork"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="FloatingNetwork">
                <xs:sequence>
                    <xs:element minOccurs="0" name="floatingIP" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="LoadbalancerConfig">
                <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="lower" type="xs:int"/>
                    <xs:element minOccurs="0" name="upper" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
        <xs:schema xmlns:ax25="http://common.stratos.apache.org/xsd" xmlns:ax211="http://domain.common.stratos.apache.org/xsd" attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://domain.controller.cloud.stratos.apache.org/xsd">
            <xs:import namespace="http://common.stratos.apache.org/xsd"/>
            <xs:import namespace="http://domain.common.stratos.apache.org/xsd"/>
            <xs:complexType name="CartridgeConfig">
                <xs:sequence>
                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="category" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="deployerType" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="exportingProperties" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="iaasConfigs" nillable="true" type="ax23:IaasConfig"/>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax23:LoadbalancerConfig"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="metadataKeys" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax23:Persistence"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax23:PortMapping"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="tenantPartitions" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"/>
=======
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
>>>>>>> fixing merging issues
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Persistence">
                <xs:sequence>
                    <xs:element minOccurs="0" name="persistanceRequired" type="xs:boolean"></xs:element>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax224:Volume"></xs:element>
<<<<<<< HEAD
>>>>>>> Add deployment policy
=======
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax225:Volume"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax224:Volume"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax224:Volume"></xs:element>
>>>>>>> fixing merging issues
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="IaasConfig">
                <xs:sequence>
                    <xs:element minOccurs="0" name="className" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="credential" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="identity" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="imageId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="networkInterfaces" nillable="true" type="ax23:NetworkInterfaces"/>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:base64Binary"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="NetworkInterfaces">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="networkInterfaces" nillable="true" type="ax23:NetworkInterface"/>
=======
            <xs:complexType name="PortMapping">
                <xs:sequence>
                    <xs:element minOccurs="0" name="kubernetesServicePort" type="xs:int"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesServicePortMapping" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="port" type="xs:int"></xs:element>
                    <xs:element minOccurs="0" name="protocol" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="proxyPort" type="xs:int"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="NetworkPartition">
                <xs:sequence>
                    <xs:element minOccurs="0" name="activeByDefault" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="partitions" nillable="true" type="ax224:Partition"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Partition">
                <xs:sequence>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="NetworkInterface">
                <xs:sequence>
                    <xs:element minOccurs="0" name="fixedIp" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="floatingNetworks" nillable="true" type="ax23:FloatingNetworks"/>
                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="portUuid" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="FloatingNetworks">
                <xs:sequence>
<<<<<<< HEAD
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="floatingNetworks" nillable="true" type="ax23:FloatingNetwork"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="FloatingNetwork">
=======
            <xs:complexType name="InstanceContext">
>>>>>>> fixing merging issues
                <xs:sequence>
                    <xs:element minOccurs="0" name="floatingIP" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="networkUuid" nillable="true" type="xs:string"/>
=======
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterInstanceId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="initTime" type="xs:long"></xs:element>
                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="obsoleteExpiryTime" type="xs:long"></xs:element>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax224:Partition"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
<<<<<<< HEAD
>>>>>>> Add deployment policy
=======
=======
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax225:Partition"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax230:Properties"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
<<<<<<< HEAD
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax224:Partition"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
>>>>>>> fixing STRATOS-1214 - deployement policy changes
>>>>>>> fixing STRATOS-1214 - deployement policy changes
=======
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax224:Partition"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
>>>>>>> fixing merging issues
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="LoadbalancerConfig">
                <xs:sequence>
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="allocatedIPs" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="applicationId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterInstanceId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultPrivateIP" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultPublicIP" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="dynamicPayload" nillable="true" type="ax232:NameValuePair"></xs:element>
                    <xs:element minOccurs="0" name="initTime" type="xs:long"></xs:element>
                    <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="instanceMetadata" nillable="true" type="ax224:InstanceMetadata"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesPodId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesPodName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="lbClusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="obsoleteExpiryTime" type="xs:long"></xs:element>
                    <xs:element minOccurs="0" name="obsoleteInitTime" type="xs:long"></xs:element>
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax224:Partition"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="privateIPs" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="publicIPs" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Persistence">
                <xs:sequence>
                    <xs:element minOccurs="0" name="persistanceRequired" type="xs:boolean"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax23:Volume"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="Volume">
                <xs:sequence>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="device" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="iaasType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="mappingPath" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="removeOntermination" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="size" type="xs:int"/>
                    <xs:element minOccurs="0" name="snapshotId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="volumeId" nillable="true" type="xs:string"/>
=======
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
>>>>>>> fixing STRATOS-1214 - deployement policy changes
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax224:AppType"></xs:element>
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax225:AppType"></xs:element>
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
=======
=======
            <xs:complexType name="Dependencies">
                <xs:sequence>
                    <xs:element minOccurs="0" name="killBehaviour" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="startupOrders" nillable="true" type="xs:string"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="CartridgeInfo">
                <xs:sequence>
>>>>>>> fixing merging issues
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax224:AppType"></xs:element>
                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="category" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax224:LoadbalancerConfig"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="metadataKeys" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax224:Persistence"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax224:PortMapping"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax226:Property"></xs:element>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="tenantPartitions" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="PortMapping">
                <xs:sequence>
                    <xs:element minOccurs="0" name="kubernetesServicePort" type="xs:int"/>
                    <xs:element minOccurs="0" name="kubernetesServicePortMapping" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="port" type="xs:int"/>
                    <xs:element minOccurs="0" name="protocol" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="proxyPort" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>
<<<<<<< HEAD
            <xs:complexType name="ServiceGroup">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="cartridges" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="dependencies" nillable="true" type="ax23:Dependencies"/>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="subGroups" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Dependencies">
                <xs:sequence>
                    <xs:element minOccurs="0" name="killBehaviour" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="startupOrders" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="ClusterContext">
                <xs:sequence>
                    <xs:element minOccurs="0" name="applicationId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="kubernetesServices" nillable="true" type="xs:anyType"/>
                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="timeoutInMillis" type="xs:long"/>
                    <xs:element minOccurs="0" name="volumeRequired" type="xs:boolean"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax23:Volume"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InstanceContext">
                <xs:sequence>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterInstanceId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="initTime" type="xs:long"/>
                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="obsoleteExpiryTime" type="xs:long"/>
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax23:Partition"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Partition">
                <xs:sequence>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="id" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="partitionMax" type="xs:int"/>
                    <xs:element minOccurs="0" name="partitionMin" type="xs:int"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="MemberContext">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="allocatedIPs" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="applicationId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterInstanceId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultPrivateIP" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultPublicIP" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="dynamicPayload" nillable="true" type="ax210:NameValuePair"/>
                    <xs:element minOccurs="0" name="initTime" type="xs:long"/>
                    <xs:element minOccurs="0" name="instanceId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="instanceMetadata" nillable="true" type="ax23:InstanceMetadata"/>
                    <xs:element minOccurs="0" name="kubernetesPodId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="kubernetesPodLabel" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="lbClusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="memberId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="networkPartitionId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="obsoleteExpiryTime" type="xs:long"/>
                    <xs:element minOccurs="0" name="obsoleteInitTime" type="xs:long"/>
                    <xs:element minOccurs="0" name="partition" nillable="true" type="ax23:Partition"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="privateIPs" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="publicIPs" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="InstanceMetadata">
                <xs:sequence>
                    <xs:element minOccurs="0" name="hostname" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hypervisor" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="imageId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="loginPort" type="xs:int"/>
                    <xs:element minOccurs="0" name="operatingSystem64bit" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="operatingSystemArchitecture" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="operatingSystemName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="operatingSystemVersion" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="ram" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="Registrant">
                <xs:sequence>
                    <xs:element minOccurs="0" name="autoScalerPolicyName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax23:Persistence"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="CartridgeInfo">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="appTypes" nillable="true" type="ax23:AppType"/>
                    <xs:element minOccurs="0" name="baseDir" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="category" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultAutoscalingPolicy" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="defaultDeploymentPolicy" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deploymentDirs" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="description" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="displayName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="isPublic" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="lbConfig" nillable="true" type="ax23:LoadbalancerConfig"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="metadataKeys" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="multiTenant" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax23:Persistence"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="portMappings" nillable="true" type="ax23:PortMapping"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="properties" nillable="true" type="ax25:Property"/>
                    <xs:element minOccurs="0" name="provider" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="serviceGroup" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="tenantPartitions" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="type" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="version" nillable="true" type="xs:string"/>
=======
            <xs:complexType name="ClusterContext">
                <xs:sequence>
                    <xs:element minOccurs="0" name="applicationId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesClusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="kubernetesServices" nillable="true" type="xs:anyType"></xs:element>
                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="timeoutInMillis" type="xs:long"></xs:element>
                    <xs:element minOccurs="0" name="volumeRequired" type="xs:boolean"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="volumes" nillable="true" type="ax224:Volume"></xs:element>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="ApplicationClusterContext">
                <xs:sequence>
                    <xs:element minOccurs="0" name="autoscalePolicyName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="dependencyClusterIds" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="textPayload" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="AppType">
                <xs:sequence>
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="appSpecificMapping" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"/>
=======
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="cartridges" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="dependencies" nillable="true" type="ax224:Dependencies"></xs:element>
                    <xs:element minOccurs="0" name="name" nillable="true" type="xs:string"></xs:element>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="subGroups" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="ApplicationClusterContext">
                <xs:sequence>
<<<<<<< HEAD
                    <xs:element minOccurs="0" name="autoscalePolicyName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="dependencyClusterIds" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="lbCluster" type="xs:boolean"/>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax25:Properties"/>
                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"/>
                    <xs:element minOccurs="0" name="textPayload" nillable="true" type="xs:string"/>
=======
                    <xs:element minOccurs="0" name="autoScalerPolicyName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="cartridgeType" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="clusterId" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="deploymentPolicyName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="hostName" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="payload" nillable="true" type="xs:string"></xs:element>
                    <xs:element minOccurs="0" name="persistence" nillable="true" type="ax224:Persistence"></xs:element>
                    <xs:element minOccurs="0" name="properties" nillable="true" type="ax226:Properties"></xs:element>
                    <xs:element minOccurs="0" name="tenantRange" nillable="true" type="xs:string"></xs:element>
>>>>>>> Add deployment policy
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
    </wsdl:types>
    <wsdl:message name="getDeploymentPoliciesRequest">
        <wsdl:part name="parameters" element="ns:getDeploymentPolicies"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getDeploymentPoliciesResponse">
        <wsdl:part name="parameters" element="ns:getDeploymentPoliciesResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getCartridgesRequest">
        <wsdl:part name="parameters" element="ns:getCartridges"/>
    </wsdl:message>
    <wsdl:message name="getCartridgesResponse">
        <wsdl:part name="parameters" element="ns:getCartridgesResponse"/>
    </wsdl:message>
    <wsdl:message name="updateKubernetesMasterRequest">
        <wsdl:part name="parameters" element="ns:updateKubernetesMaster"/>
    </wsdl:message>
    <wsdl:message name="updateKubernetesMasterResponse">
        <wsdl:part name="parameters" element="ns:updateKubernetesMasterResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidKubernetesMasterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidKubernetesMasterException"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceNonExistingKubernetesMasterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceNonExistingKubernetesMasterException"/>
    </wsdl:message>
    <wsdl:message name="validatePartitionRequest">
        <wsdl:part name="parameters" element="ns:validatePartition"/>
    </wsdl:message>
    <wsdl:message name="validatePartitionResponse">
        <wsdl:part name="parameters" element="ns:validatePartitionResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidPartitionException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidPartitionException"/>
    </wsdl:message>
    <wsdl:message name="createApplicationClustersRequest">
        <wsdl:part name="parameters" element="ns:createApplicationClusters"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceApplicationClusterRegistrationException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceApplicationClusterRegistrationException"/>
    </wsdl:message>
    <wsdl:message name="getDeploymentPolicyRequest">
        <wsdl:part name="parameters" element="ns:getDeploymentPolicy"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getDeploymentPolicyResponse">
        <wsdl:part name="parameters" element="ns:getDeploymentPolicyResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceDeploymentPolicyNotExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceDeploymentPolicyNotExistsException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="removeKubernetesClusterRequest">
        <wsdl:part name="parameters" element="ns:removeKubernetesCluster"/>
    </wsdl:message>
    <wsdl:message name="removeKubernetesClusterResponse">
        <wsdl:part name="parameters" element="ns:removeKubernetesClusterResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceNonExistingKubernetesClusterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceNonExistingKubernetesClusterException"/>
    </wsdl:message>
    <wsdl:message name="validateDeploymentPolicyRequest">
        <wsdl:part name="parameters" element="ns:validateDeploymentPolicy"/>
    </wsdl:message>
    <wsdl:message name="validateDeploymentPolicyResponse">
        <wsdl:part name="parameters" element="ns:validateDeploymentPolicyResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidCartridgeTypeException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeTypeException"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupCartridgesRequest">
        <wsdl:part name="parameters" element="ns:getServiceGroupCartridges"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupCartridgesResponse">
        <wsdl:part name="parameters" element="ns:getServiceGroupCartridgesResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidServiceGroupException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidServiceGroupException"/>
    </wsdl:message>
    <wsdl:message name="addKubernetesClusterRequest">
        <wsdl:part name="parameters" element="ns:addKubernetesCluster"/>
    </wsdl:message>
    <wsdl:message name="addKubernetesClusterResponse">
        <wsdl:part name="parameters" element="ns:addKubernetesClusterResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidKubernetesClusterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidKubernetesClusterException"/>
    </wsdl:message>
    <wsdl:message name="registerServiceRequest">
        <wsdl:part name="parameters" element="ns:registerService"/>
    </wsdl:message>
    <wsdl:message name="registerServiceResponse">
        <wsdl:part name="parameters" element="ns:registerServiceResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceCartridgeNotFoundException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCartridgeNotFoundException"/>
    </wsdl:message>
    <wsdl:message name="addServiceGroupRequest">
        <wsdl:part name="parameters" element="ns:addServiceGroup"/>
    </wsdl:message>
    <wsdl:message name="terminateInstanceRequest">
        <wsdl:part name="parameters" element="ns:terminateInstance"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidMemberException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidMemberException"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceCloudControllerException">
<<<<<<< HEAD
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCloudControllerException"/>
=======
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCloudControllerException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="addDeployementPolicyRequest">
        <wsdl:part name="parameters" element="ns:addDeployementPolicy"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceDeploymentPolicyAlreadyExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceDeploymentPolicyAlreadyExistsException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidDeploymentPolicyException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidDeploymentPolicyException"></wsdl:part>
>>>>>>> Add deployment policy
    </wsdl:message>
    <wsdl:message name="getServiceGroupDependenciesRequest">
        <wsdl:part name="parameters" element="ns:getServiceGroupDependencies"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupDependenciesResponse">
        <wsdl:part name="parameters" element="ns:getServiceGroupDependenciesResponse"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupRequest">
        <wsdl:part name="parameters" element="ns:getServiceGroup"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupResponse">
        <wsdl:part name="parameters" element="ns:getServiceGroupResponse"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupSubGroupsRequest">
        <wsdl:part name="parameters" element="ns:getServiceGroupSubGroups"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupSubGroupsResponse">
        <wsdl:part name="parameters" element="ns:getServiceGroupSubGroupsResponse"/>
    </wsdl:message>
    <wsdl:message name="getServiceGroupRequest">
        <wsdl:part name="parameters" element="ns:getServiceGroup"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getServiceGroupResponse">
        <wsdl:part name="parameters" element="ns:getServiceGroupResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="updateNetworkPartitionRequest">
        <wsdl:part name="parameters" element="ns:updateNetworkPartition"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceNetworkPartitionNotExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceNetworkPartitionNotExistsException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="removeNetworkPartitionRequest">
        <wsdl:part name="parameters" element="ns:removeNetworkPartition"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getCartridgeInfoRequest">
        <wsdl:part name="parameters" element="ns:getCartridgeInfo"/>
    </wsdl:message>
    <wsdl:message name="getCartridgeInfoResponse">
        <wsdl:part name="parameters" element="ns:getCartridgeInfoResponse"/>
    </wsdl:message>
    <wsdl:message name="addKubernetesHostRequest">
        <wsdl:part name="parameters" element="ns:addKubernetesHost"/>
    </wsdl:message>
    <wsdl:message name="addKubernetesHostResponse">
        <wsdl:part name="parameters" element="ns:addKubernetesHostResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidKubernetesHostException">
<<<<<<< HEAD
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidKubernetesHostException"/>
=======
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidKubernetesHostException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="updateDeployementPolicyRequest">
        <wsdl:part name="parameters" element="ns:updateDeployementPolicy"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="removeDeployementPolicyRequest">
        <wsdl:part name="parameters" element="ns:removeDeployementPolicy"></wsdl:part>
>>>>>>> Add deployment policy
    </wsdl:message>
    <wsdl:message name="createClusterInstanceRequest">
        <wsdl:part name="parameters" element="ns:createClusterInstance"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceClusterInstanceCreationException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceClusterInstanceCreationException"/>
    </wsdl:message>
    <wsdl:message name="unregisterServiceRequest">
        <wsdl:part name="parameters" element="ns:unregisterService"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceUnregisteredClusterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredClusterException"/>
    </wsdl:message>
    <wsdl:message name="unregisterServiceRequest">
        <wsdl:part name="parameters" element="ns:unregisterService"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceUnregisteredClusterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceUnregisteredClusterException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getHostsForKubernetesClusterRequest">
        <wsdl:part name="parameters" element="ns:getHostsForKubernetesCluster"/>
    </wsdl:message>
    <wsdl:message name="getHostsForKubernetesClusterResponse">
        <wsdl:part name="parameters" element="ns:getHostsForKubernetesClusterResponse"/>
    </wsdl:message>
    <wsdl:message name="removeKubernetesHostRequest">
        <wsdl:part name="parameters" element="ns:removeKubernetesHost"/>
    </wsdl:message>
    <wsdl:message name="removeKubernetesHostResponse">
        <wsdl:part name="parameters" element="ns:removeKubernetesHostResponse"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceNonExistingKubernetesHostException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceNonExistingKubernetesHostException"/>
    </wsdl:message>
    <wsdl:message name="getKubernetesClustersRequest">
        <wsdl:part name="parameters" element="ns:getKubernetesClusters"/>
    </wsdl:message>
    <wsdl:message name="getKubernetesClustersResponse">
        <wsdl:part name="parameters" element="ns:getKubernetesClustersResponse"/>
    </wsdl:message>
    <wsdl:message name="getMasterForKubernetesClusterRequest">
        <wsdl:part name="parameters" element="ns:getMasterForKubernetesCluster"/>
    </wsdl:message>
    <wsdl:message name="getMasterForKubernetesClusterResponse">
        <wsdl:part name="parameters" element="ns:getMasterForKubernetesClusterResponse"/>
    </wsdl:message>
    <wsdl:message name="startInstancesRequest">
<<<<<<< HEAD
        <wsdl:part name="parameters" element="ns:startInstances"/>
=======
        <wsdl:part name="parameters" element="ns:startInstances"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="startInstancesResponse">
        <wsdl:part name="parameters" element="ns:startInstancesResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidIaasProviderException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidIaasProviderException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="updateCartridgeRequest">
        <wsdl:part name="parameters" element="ns:updateCartridge"></wsdl:part>
>>>>>>> Add deployment policy
    </wsdl:message>
    <wsdl:message name="startInstancesResponse">
        <wsdl:part name="parameters" element="ns:startInstancesResponse"/>
    </wsdl:message>
<<<<<<< HEAD
    <wsdl:message name="CloudControllerServiceInvalidIaasProviderException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidIaasProviderException"/>
    </wsdl:message>
    <wsdl:message name="updateCartridgeRequest">
        <wsdl:part name="parameters" element="ns:updateCartridge"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidCartridgeDefinitionException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidCartridgeDefinitionException"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceCartridgeDefinitionNotExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCartridgeDefinitionNotExistsException"/>
    </wsdl:message>
=======
    <wsdl:message name="CloudControllerServiceCartridgeDefinitionNotExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCartridgeDefinitionNotExistsException"></wsdl:part>
    </wsdl:message>
>>>>>>> Add deployment policy
    <wsdl:message name="startInstanceRequest">
        <wsdl:part name="parameters" element="ns:startInstance"/>
    </wsdl:message>
    <wsdl:message name="startInstanceResponse">
        <wsdl:part name="parameters" element="ns:startInstanceResponse"/>
    </wsdl:message>
    <wsdl:message name="terminateInstancesRequest">
        <wsdl:part name="parameters" element="ns:terminateInstances"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceInvalidClusterException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceInvalidClusterException"/>
    </wsdl:message>
    <wsdl:message name="getNetworkPartitionRequest">
        <wsdl:part name="parameters" element="ns:getNetworkPartition"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getNetworkPartitionResponse">
        <wsdl:part name="parameters" element="ns:getNetworkPartitionResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="updateClusterStatusRequest">
        <wsdl:part name="parameters" element="ns:updateClusterStatus"/>
    </wsdl:message>
    <wsdl:message name="getClusterContextRequest">
        <wsdl:part name="parameters" element="ns:getClusterContext"/>
    </wsdl:message>
    <wsdl:message name="getClusterContextResponse">
        <wsdl:part name="parameters" element="ns:getClusterContextResponse"/>
    </wsdl:message>
    <wsdl:message name="updateKubernetesHostRequest">
        <wsdl:part name="parameters" element="ns:updateKubernetesHost"/>
    </wsdl:message>
    <wsdl:message name="updateKubernetesHostResponse">
        <wsdl:part name="parameters" element="ns:updateKubernetesHostResponse"/>
    </wsdl:message>
    <wsdl:message name="removeServiceGroupRequest">
        <wsdl:part name="parameters" element="ns:removeServiceGroup"/>
    </wsdl:message>
    <wsdl:message name="addNetworkPartitionRequest">
        <wsdl:part name="parameters" element="ns:addNetworkPartition"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceNetworkPartitionAlreadyExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceNetworkPartitionAlreadyExistsException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getKubernetesClusterRequest">
        <wsdl:part name="parameters" element="ns:getKubernetesCluster"/>
    </wsdl:message>
    <wsdl:message name="getKubernetesClusterResponse">
        <wsdl:part name="parameters" element="ns:getKubernetesClusterResponse"/>
    </wsdl:message>
    <wsdl:message name="removeCartridgeRequest">
        <wsdl:part name="parameters" element="ns:removeCartridge"/>
    </wsdl:message>
    <wsdl:message name="addCartridgeRequest">
        <wsdl:part name="parameters" element="ns:addCartridge"/>
    </wsdl:message>
    <wsdl:message name="CloudControllerServiceCartridgeAlreadyExistsException">
        <wsdl:part name="parameters" element="ns:CloudControllerServiceCartridgeAlreadyExistsException"/>
    </wsdl:message>
    <wsdl:message name="getNetworkPartitionsRequest">
        <wsdl:part name="parameters" element="ns:getNetworkPartitions"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getNetworkPartitionsResponse">
        <wsdl:part name="parameters" element="ns:getNetworkPartitionsResponse"></wsdl:part>
    </wsdl:message>
    <wsdl:portType name="CloudControllerServicePortType">
        <wsdl:operation name="getDeploymentPolicies">
            <wsdl:input message="ns:getDeploymentPoliciesRequest" wsaw:Action="urn:getDeploymentPolicies"></wsdl:input>
            <wsdl:output message="ns:getDeploymentPoliciesResponse" wsaw:Action="urn:getDeploymentPoliciesResponse"></wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getCartridges">
            <wsdl:input message="ns:getCartridgesRequest" wsaw:Action="urn:getCartridges"/>
            <wsdl:output message="ns:getCartridgesResponse" wsaw:Action="urn:getCartridgesResponse"/>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesMaster">
            <wsdl:input message="ns:updateKubernetesMasterRequest" wsaw:Action="urn:updateKubernetesMaster"/>
            <wsdl:output message="ns:updateKubernetesMasterResponse" wsaw:Action="urn:updateKubernetesMasterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidKubernetesMasterException" name="CloudControllerServiceInvalidKubernetesMasterException" wsaw:Action="urn:updateKubernetesMasterCloudControllerServiceInvalidKubernetesMasterException"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesMasterException" name="CloudControllerServiceNonExistingKubernetesMasterException" wsaw:Action="urn:updateKubernetesMasterCloudControllerServiceNonExistingKubernetesMasterException"/>
        </wsdl:operation>
        <wsdl:operation name="validatePartition">
            <wsdl:input message="ns:validatePartitionRequest" wsaw:Action="urn:validatePartition"/>
            <wsdl:output message="ns:validatePartitionResponse" wsaw:Action="urn:validatePartitionResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validatePartitionCloudControllerServiceInvalidPartitionException"/>
        </wsdl:operation>
        <wsdl:operation name="createApplicationClusters">
            <wsdl:input message="ns:createApplicationClustersRequest" wsaw:Action="urn:createApplicationClusters"/>
            <wsdl:fault message="ns:CloudControllerServiceApplicationClusterRegistrationException" name="CloudControllerServiceApplicationClusterRegistrationException" wsaw:Action="urn:createApplicationClustersCloudControllerServiceApplicationClusterRegistrationException"/>
        </wsdl:operation>
        <wsdl:operation name="getDeploymentPolicy">
            <wsdl:input message="ns:getDeploymentPolicyRequest" wsaw:Action="urn:getDeploymentPolicy"></wsdl:input>
            <wsdl:output message="ns:getDeploymentPolicyResponse" wsaw:Action="urn:getDeploymentPolicyResponse"></wsdl:output>
            <wsdl:fault message="ns:CloudControllerServiceDeploymentPolicyNotExistsException" name="CloudControllerServiceDeploymentPolicyNotExistsException" wsaw:Action="urn:getDeploymentPolicyCloudControllerServiceDeploymentPolicyNotExistsException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesCluster">
            <wsdl:input message="ns:removeKubernetesClusterRequest" wsaw:Action="urn:removeKubernetesCluster"/>
            <wsdl:output message="ns:removeKubernetesClusterResponse" wsaw:Action="urn:removeKubernetesClusterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:removeKubernetesClusterCloudControllerServiceNonExistingKubernetesClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="validateDeploymentPolicy">
            <wsdl:input message="ns:validateDeploymentPolicyRequest" wsaw:Action="urn:validateDeploymentPolicy"/>
            <wsdl:output message="ns:validateDeploymentPolicyResponse" wsaw:Action="urn:validateDeploymentPolicyResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidPartitionException" name="CloudControllerServiceInvalidPartitionException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidPartitionException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:validateDeploymentPolicyCloudControllerServiceInvalidCartridgeTypeException"/>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupCartridges">
            <wsdl:input message="ns:getServiceGroupCartridgesRequest" wsaw:Action="urn:getServiceGroupCartridges"/>
            <wsdl:output message="ns:getServiceGroupCartridgesResponse" wsaw:Action="urn:getServiceGroupCartridgesResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:getServiceGroupCartridgesCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesCluster">
            <wsdl:input message="ns:addKubernetesClusterRequest" wsaw:Action="urn:addKubernetesCluster"/>
            <wsdl:output message="ns:addKubernetesClusterResponse" wsaw:Action="urn:addKubernetesClusterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidKubernetesClusterException" name="CloudControllerServiceInvalidKubernetesClusterException" wsaw:Action="urn:addKubernetesClusterCloudControllerServiceInvalidKubernetesClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="registerService">
            <wsdl:input message="ns:registerServiceRequest" wsaw:Action="urn:registerService"/>
            <wsdl:output message="ns:registerServiceResponse" wsaw:Action="urn:registerServiceResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeNotFoundException" name="CloudControllerServiceCartridgeNotFoundException" wsaw:Action="urn:registerServiceCloudControllerServiceCartridgeNotFoundException"/>
        </wsdl:operation>
        <wsdl:operation name="addServiceGroup">
            <wsdl:input message="ns:addServiceGroupRequest" wsaw:Action="urn:addServiceGroup"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:addServiceGroupCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="terminateInstance">
<<<<<<< HEAD
            <wsdl:input message="ns:terminateInstanceRequest" wsaw:Action="urn:terminateInstance"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidMemberException" name="CloudControllerServiceInvalidMemberException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidMemberException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidCartridgeTypeException"/>
            <wsdl:fault message="ns:CloudControllerServiceCloudControllerException" name="CloudControllerServiceCloudControllerException" wsaw:Action="urn:terminateInstanceCloudControllerServiceCloudControllerException"/>
=======
            <wsdl:input message="ns:terminateInstanceRequest" wsaw:Action="urn:terminateInstance"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceInvalidMemberException" name="CloudControllerServiceInvalidMemberException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidMemberException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:terminateInstanceCloudControllerServiceInvalidCartridgeTypeException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceCloudControllerException" name="CloudControllerServiceCloudControllerException" wsaw:Action="urn:terminateInstanceCloudControllerServiceCloudControllerException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addDeployementPolicy">
            <wsdl:input message="ns:addDeployementPolicyRequest" wsaw:Action="urn:addDeployementPolicy"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceDeploymentPolicyAlreadyExistsException" name="CloudControllerServiceDeploymentPolicyAlreadyExistsException" wsaw:Action="urn:addDeployementPolicyCloudControllerServiceDeploymentPolicyAlreadyExistsException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceInvalidDeploymentPolicyException" name="CloudControllerServiceInvalidDeploymentPolicyException" wsaw:Action="urn:addDeployementPolicyCloudControllerServiceInvalidDeploymentPolicyException"></wsdl:fault>
>>>>>>> Add deployment policy
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupDependencies">
            <wsdl:input message="ns:getServiceGroupDependenciesRequest" wsaw:Action="urn:getServiceGroupDependencies"/>
            <wsdl:output message="ns:getServiceGroupDependenciesResponse" wsaw:Action="urn:getServiceGroupDependenciesResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:getServiceGroupDependenciesCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroup">
            <wsdl:input message="ns:getServiceGroupRequest" wsaw:Action="urn:getServiceGroup"/>
            <wsdl:output message="ns:getServiceGroupResponse" wsaw:Action="urn:getServiceGroupResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:getServiceGroupCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupSubGroups">
            <wsdl:input message="ns:getServiceGroupSubGroupsRequest" wsaw:Action="urn:getServiceGroupSubGroups"/>
            <wsdl:output message="ns:getServiceGroupSubGroupsResponse" wsaw:Action="urn:getServiceGroupSubGroupsResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:getServiceGroupSubGroupsCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroup">
            <wsdl:input message="ns:getServiceGroupRequest" wsaw:Action="urn:getServiceGroup"></wsdl:input>
            <wsdl:output message="ns:getServiceGroupResponse" wsaw:Action="urn:getServiceGroupResponse"></wsdl:output>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:getServiceGroupCloudControllerServiceInvalidServiceGroupException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateNetworkPartition">
            <wsdl:input message="ns:updateNetworkPartitionRequest" wsaw:Action="urn:updateNetworkPartition"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceNetworkPartitionNotExistsException" name="CloudControllerServiceNetworkPartitionNotExistsException" wsaw:Action="urn:updateNetworkPartitionCloudControllerServiceNetworkPartitionNotExistsException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeNetworkPartition">
            <wsdl:input message="ns:removeNetworkPartitionRequest" wsaw:Action="urn:removeNetworkPartition"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceNetworkPartitionNotExistsException" name="CloudControllerServiceNetworkPartitionNotExistsException" wsaw:Action="urn:removeNetworkPartitionCloudControllerServiceNetworkPartitionNotExistsException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getCartridgeInfo">
            <wsdl:input message="ns:getCartridgeInfoRequest" wsaw:Action="urn:getCartridgeInfo"/>
            <wsdl:output message="ns:getCartridgeInfoResponse" wsaw:Action="urn:getCartridgeInfoResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeNotFoundException" name="CloudControllerServiceCartridgeNotFoundException" wsaw:Action="urn:getCartridgeInfoCloudControllerServiceCartridgeNotFoundException"/>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesHost">
<<<<<<< HEAD
            <wsdl:input message="ns:addKubernetesHostRequest" wsaw:Action="urn:addKubernetesHost"/>
            <wsdl:output message="ns:addKubernetesHostResponse" wsaw:Action="urn:addKubernetesHostResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidKubernetesHostException" name="CloudControllerServiceInvalidKubernetesHostException" wsaw:Action="urn:addKubernetesHostCloudControllerServiceInvalidKubernetesHostException"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:addKubernetesHostCloudControllerServiceNonExistingKubernetesClusterException"/>
=======
            <wsdl:input message="ns:addKubernetesHostRequest" wsaw:Action="urn:addKubernetesHost"></wsdl:input>
            <wsdl:output message="ns:addKubernetesHostResponse" wsaw:Action="urn:addKubernetesHostResponse"></wsdl:output>
            <wsdl:fault message="ns:CloudControllerServiceInvalidKubernetesHostException" name="CloudControllerServiceInvalidKubernetesHostException" wsaw:Action="urn:addKubernetesHostCloudControllerServiceInvalidKubernetesHostException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:addKubernetesHostCloudControllerServiceNonExistingKubernetesClusterException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateDeployementPolicy">
            <wsdl:input message="ns:updateDeployementPolicyRequest" wsaw:Action="urn:updateDeployementPolicy"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceDeploymentPolicyNotExistsException" name="CloudControllerServiceDeploymentPolicyNotExistsException" wsaw:Action="urn:updateDeployementPolicyCloudControllerServiceDeploymentPolicyNotExistsException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceInvalidDeploymentPolicyException" name="CloudControllerServiceInvalidDeploymentPolicyException" wsaw:Action="urn:updateDeployementPolicyCloudControllerServiceInvalidDeploymentPolicyException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeDeployementPolicy">
            <wsdl:input message="ns:removeDeployementPolicyRequest" wsaw:Action="urn:removeDeployementPolicy"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceDeploymentPolicyNotExistsException" name="CloudControllerServiceDeploymentPolicyNotExistsException" wsaw:Action="urn:removeDeployementPolicyCloudControllerServiceDeploymentPolicyNotExistsException"></wsdl:fault>
>>>>>>> Add deployment policy
        </wsdl:operation>
        <wsdl:operation name="createClusterInstance">
            <wsdl:input message="ns:createClusterInstanceRequest" wsaw:Action="urn:createClusterInstance"/>
            <wsdl:fault message="ns:CloudControllerServiceClusterInstanceCreationException" name="CloudControllerServiceClusterInstanceCreationException" wsaw:Action="urn:createClusterInstanceCloudControllerServiceClusterInstanceCreationException"/>
        </wsdl:operation>
        <wsdl:operation name="unregisterService">
            <wsdl:input message="ns:unregisterServiceRequest" wsaw:Action="urn:unregisterService"/>
            <wsdl:fault message="ns:CloudControllerServiceUnregisteredClusterException" name="CloudControllerServiceUnregisteredClusterException" wsaw:Action="urn:unregisterServiceCloudControllerServiceUnregisteredClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="unregisterService">
            <wsdl:input message="ns:unregisterServiceRequest" wsaw:Action="urn:unregisterService"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceUnregisteredClusterException" name="CloudControllerServiceUnregisteredClusterException" wsaw:Action="urn:unregisterServiceCloudControllerServiceUnregisteredClusterException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getHostsForKubernetesCluster">
            <wsdl:input message="ns:getHostsForKubernetesClusterRequest" wsaw:Action="urn:getHostsForKubernetesCluster"/>
            <wsdl:output message="ns:getHostsForKubernetesClusterResponse" wsaw:Action="urn:getHostsForKubernetesClusterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:getHostsForKubernetesClusterCloudControllerServiceNonExistingKubernetesClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesHost">
            <wsdl:input message="ns:removeKubernetesHostRequest" wsaw:Action="urn:removeKubernetesHost"/>
            <wsdl:output message="ns:removeKubernetesHostResponse" wsaw:Action="urn:removeKubernetesHostResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesHostException" name="CloudControllerServiceNonExistingKubernetesHostException" wsaw:Action="urn:removeKubernetesHostCloudControllerServiceNonExistingKubernetesHostException"/>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesClusters">
            <wsdl:input message="ns:getKubernetesClustersRequest" wsaw:Action="urn:getKubernetesClusters"/>
            <wsdl:output message="ns:getKubernetesClustersResponse" wsaw:Action="urn:getKubernetesClustersResponse"/>
        </wsdl:operation>
        <wsdl:operation name="getMasterForKubernetesCluster">
<<<<<<< HEAD
            <wsdl:input message="ns:getMasterForKubernetesClusterRequest" wsaw:Action="urn:getMasterForKubernetesCluster"/>
            <wsdl:output message="ns:getMasterForKubernetesClusterResponse" wsaw:Action="urn:getMasterForKubernetesClusterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:getMasterForKubernetesClusterCloudControllerServiceNonExistingKubernetesClusterException"/>
=======
            <wsdl:input message="ns:getMasterForKubernetesClusterRequest" wsaw:Action="urn:getMasterForKubernetesCluster"></wsdl:input>
            <wsdl:output message="ns:getMasterForKubernetesClusterResponse" wsaw:Action="urn:getMasterForKubernetesClusterResponse"></wsdl:output>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:getMasterForKubernetesClusterCloudControllerServiceNonExistingKubernetesClusterException"></wsdl:fault>
>>>>>>> Add deployment policy
        </wsdl:operation>
        <wsdl:operation name="startInstances">
            <wsdl:input message="ns:startInstancesRequest" wsaw:Action="urn:startInstances"/>
            <wsdl:output message="ns:startInstancesResponse" wsaw:Action="urn:startInstancesResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeNotFoundException" name="CloudControllerServiceCartridgeNotFoundException" wsaw:Action="urn:startInstancesCloudControllerServiceCartridgeNotFoundException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:startInstancesCloudControllerServiceInvalidIaasProviderException"/>
            <wsdl:fault message="ns:CloudControllerServiceCloudControllerException" name="CloudControllerServiceCloudControllerException" wsaw:Action="urn:startInstancesCloudControllerServiceCloudControllerException"/>
        </wsdl:operation>
        <wsdl:operation name="updateCartridge">
            <wsdl:input message="ns:updateCartridgeRequest" wsaw:Action="urn:updateCartridge"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeDefinitionException" name="CloudControllerServiceInvalidCartridgeDefinitionException" wsaw:Action="urn:updateCartridgeCloudControllerServiceInvalidCartridgeDefinitionException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:updateCartridgeCloudControllerServiceInvalidIaasProviderException"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeDefinitionNotExistsException" name="CloudControllerServiceCartridgeDefinitionNotExistsException" wsaw:Action="urn:updateCartridgeCloudControllerServiceCartridgeDefinitionNotExistsException"/>
        </wsdl:operation>
        <wsdl:operation name="updateCartridge">
            <wsdl:input message="ns:updateCartridgeRequest" wsaw:Action="urn:updateCartridge"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeDefinitionException" name="CloudControllerServiceInvalidCartridgeDefinitionException" wsaw:Action="urn:updateCartridgeCloudControllerServiceInvalidCartridgeDefinitionException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:updateCartridgeCloudControllerServiceInvalidIaasProviderException"></wsdl:fault>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeDefinitionNotExistsException" name="CloudControllerServiceCartridgeDefinitionNotExistsException" wsaw:Action="urn:updateCartridgeCloudControllerServiceCartridgeDefinitionNotExistsException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="startInstance">
            <wsdl:input message="ns:startInstanceRequest" wsaw:Action="urn:startInstance"/>
            <wsdl:output message="ns:startInstanceResponse" wsaw:Action="urn:startInstanceResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeNotFoundException" name="CloudControllerServiceCartridgeNotFoundException" wsaw:Action="urn:startInstanceCloudControllerServiceCartridgeNotFoundException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:startInstanceCloudControllerServiceInvalidIaasProviderException"/>
            <wsdl:fault message="ns:CloudControllerServiceCloudControllerException" name="CloudControllerServiceCloudControllerException" wsaw:Action="urn:startInstanceCloudControllerServiceCloudControllerException"/>
        </wsdl:operation>
        <wsdl:operation name="terminateInstances">
            <wsdl:input message="ns:terminateInstancesRequest" wsaw:Action="urn:terminateInstances"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidClusterException" name="CloudControllerServiceInvalidClusterException" wsaw:Action="urn:terminateInstancesCloudControllerServiceInvalidClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartition">
            <wsdl:input message="ns:getNetworkPartitionRequest" wsaw:Action="urn:getNetworkPartition"></wsdl:input>
            <wsdl:output message="ns:getNetworkPartitionResponse" wsaw:Action="urn:getNetworkPartitionResponse"></wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateClusterStatus">
            <wsdl:input message="ns:updateClusterStatusRequest" wsaw:Action="urn:updateClusterStatus"/>
        </wsdl:operation>
        <wsdl:operation name="getClusterContext">
            <wsdl:input message="ns:getClusterContextRequest" wsaw:Action="urn:getClusterContext"/>
            <wsdl:output message="ns:getClusterContextResponse" wsaw:Action="urn:getClusterContextResponse"/>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesHost">
            <wsdl:input message="ns:updateKubernetesHostRequest" wsaw:Action="urn:updateKubernetesHost"/>
            <wsdl:output message="ns:updateKubernetesHostResponse" wsaw:Action="urn:updateKubernetesHostResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidKubernetesHostException" name="CloudControllerServiceInvalidKubernetesHostException" wsaw:Action="urn:updateKubernetesHostCloudControllerServiceInvalidKubernetesHostException"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesHostException" name="CloudControllerServiceNonExistingKubernetesHostException" wsaw:Action="urn:updateKubernetesHostCloudControllerServiceNonExistingKubernetesHostException"/>
        </wsdl:operation>
        <wsdl:operation name="removeServiceGroup">
            <wsdl:input message="ns:removeServiceGroupRequest" wsaw:Action="urn:removeServiceGroup"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidServiceGroupException" name="CloudControllerServiceInvalidServiceGroupException" wsaw:Action="urn:removeServiceGroupCloudControllerServiceInvalidServiceGroupException"/>
        </wsdl:operation>
        <wsdl:operation name="addNetworkPartition">
            <wsdl:input message="ns:addNetworkPartitionRequest" wsaw:Action="urn:addNetworkPartition"></wsdl:input>
            <wsdl:fault message="ns:CloudControllerServiceNetworkPartitionAlreadyExistsException" name="CloudControllerServiceNetworkPartitionAlreadyExistsException" wsaw:Action="urn:addNetworkPartitionCloudControllerServiceNetworkPartitionAlreadyExistsException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesCluster">
            <wsdl:input message="ns:getKubernetesClusterRequest" wsaw:Action="urn:getKubernetesCluster"/>
            <wsdl:output message="ns:getKubernetesClusterResponse" wsaw:Action="urn:getKubernetesClusterResponse"/>
            <wsdl:fault message="ns:CloudControllerServiceNonExistingKubernetesClusterException" name="CloudControllerServiceNonExistingKubernetesClusterException" wsaw:Action="urn:getKubernetesClusterCloudControllerServiceNonExistingKubernetesClusterException"/>
        </wsdl:operation>
        <wsdl:operation name="removeCartridge">
            <wsdl:input message="ns:removeCartridgeRequest" wsaw:Action="urn:removeCartridge"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeTypeException" name="CloudControllerServiceInvalidCartridgeTypeException" wsaw:Action="urn:removeCartridgeCloudControllerServiceInvalidCartridgeTypeException"/>
        </wsdl:operation>
        <wsdl:operation name="addCartridge">
            <wsdl:input message="ns:addCartridgeRequest" wsaw:Action="urn:addCartridge"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidCartridgeDefinitionException" name="CloudControllerServiceInvalidCartridgeDefinitionException" wsaw:Action="urn:addCartridgeCloudControllerServiceInvalidCartridgeDefinitionException"/>
            <wsdl:fault message="ns:CloudControllerServiceInvalidIaasProviderException" name="CloudControllerServiceInvalidIaasProviderException" wsaw:Action="urn:addCartridgeCloudControllerServiceInvalidIaasProviderException"/>
            <wsdl:fault message="ns:CloudControllerServiceCartridgeAlreadyExistsException" name="CloudControllerServiceCartridgeAlreadyExistsException" wsaw:Action="urn:addCartridgeCloudControllerServiceCartridgeAlreadyExistsException"/>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartitions">
            <wsdl:input message="ns:getNetworkPartitionsRequest" wsaw:Action="urn:getNetworkPartitions"></wsdl:input>
            <wsdl:output message="ns:getNetworkPartitionsResponse" wsaw:Action="urn:getNetworkPartitionsResponse"></wsdl:output>
        </wsdl:operation>
    </wsdl:portType>
    <wsdl:binding name="CloudControllerServiceSoap11Binding" type="ns:CloudControllerServicePortType">
<<<<<<< HEAD
        <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
=======
        <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"></soap:binding>
        <wsdl:operation name="getDeploymentPolicies">
            <soap:operation soapAction="urn:getDeploymentPolicies" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"></soap:body>
            </wsdl:output>
        </wsdl:operation>
>>>>>>> Add deployment policy
        <wsdl:operation name="getCartridges">
            <soap:operation soapAction="urn:getCartridges" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesMaster">
            <soap:operation soapAction="urn:updateKubernetesMaster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesMasterException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidKubernetesMasterException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesMasterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesMasterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="validatePartition">
            <soap:operation soapAction="urn:validatePartition" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="createApplicationClusters">
            <soap:operation soapAction="urn:createApplicationClusters" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceApplicationClusterRegistrationException">
<<<<<<< HEAD
                <soap:fault use="literal" name="CloudControllerServiceApplicationClusterRegistrationException"/>
=======
                <soap:fault use="literal" name="CloudControllerServiceApplicationClusterRegistrationException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getDeploymentPolicy">
            <soap:operation soapAction="urn:getDeploymentPolicy" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"></soap:body>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap:fault>
>>>>>>> Add deployment policy
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesCluster">
            <soap:operation soapAction="urn:removeKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="validateDeploymentPolicy">
            <soap:operation soapAction="urn:validateDeploymentPolicy" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupCartridges">
            <soap:operation soapAction="urn:getServiceGroupCartridges" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesCluster">
            <soap:operation soapAction="urn:addKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addServiceGroup">
            <soap:operation soapAction="urn:addServiceGroup" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="registerService">
            <soap:operation soapAction="urn:registerService" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="terminateInstance">
            <soap:operation soapAction="urn:terminateInstance" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidMemberException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidMemberException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroup">
            <soap:operation soapAction="urn:getServiceGroup" style="document"/>
=======
        <wsdl:operation name="addDeployementPolicy">
            <soap:operation soapAction="urn:addDeployementPolicy" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidDeploymentPolicyException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidDeploymentPolicyException"></soap:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyAlreadyExistsException">
                <soap:fault use="literal" name="CloudControllerServiceDeploymentPolicyAlreadyExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupDependencies">
            <soap:operation soapAction="urn:getServiceGroupDependencies" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupDependencies">
            <soap:operation soapAction="urn:getServiceGroupDependencies" style="document"/>
=======
        <wsdl:operation name="getServiceGroupSubGroups">
            <soap:operation soapAction="urn:getServiceGroupSubGroups" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupSubGroups">
            <soap:operation soapAction="urn:getServiceGroupSubGroups" style="document"/>
=======
        <wsdl:operation name="getServiceGroup">
            <soap:operation soapAction="urn:getServiceGroup" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeNetworkPartition">
            <soap:operation soapAction="urn:removeNetworkPartition" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionNotExistsException">
                <soap:fault use="literal" name="CloudControllerServiceNetworkPartitionNotExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateNetworkPartition">
            <soap:operation soapAction="urn:updateNetworkPartition" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionNotExistsException">
                <soap:fault use="literal" name="CloudControllerServiceNetworkPartitionNotExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getCartridgeInfo">
            <soap:operation soapAction="urn:getCartridgeInfo" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesHost">
            <soap:operation soapAction="urn:addKubernetesHost" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesHostException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidKubernetesHostException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="unregisterService">
            <soap:operation soapAction="urn:unregisterService" style="document"/>
=======
        <wsdl:operation name="updateDeployementPolicy">
            <soap:operation soapAction="urn:updateDeployementPolicy" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidDeploymentPolicyException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidDeploymentPolicyException"></soap:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="createClusterInstance">
            <soap:operation soapAction="urn:createClusterInstance" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceUnregisteredClusterException">
                <soap:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="createClusterInstance">
            <soap:operation soapAction="urn:createClusterInstance" style="document"/>
=======
        <wsdl:operation name="removeDeployementPolicy">
            <soap:operation soapAction="urn:removeDeployementPolicy" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="unregisterService">
            <soap:operation soapAction="urn:unregisterService" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceClusterInstanceCreationException">
                <soap:fault use="literal" name="CloudControllerServiceClusterInstanceCreationException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getHostsForKubernetesCluster">
            <soap:operation soapAction="urn:getHostsForKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesHost">
            <soap:operation soapAction="urn:removeKubernetesHost" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesHostException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesHostException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesClusters">
            <soap:operation soapAction="urn:getKubernetesClusters" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getMasterForKubernetesCluster">
            <soap:operation soapAction="urn:getMasterForKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateCartridge">
<<<<<<< HEAD
            <soap:operation soapAction="urn:updateCartridge" style="document"/>
=======
            <soap:operation soapAction="urn:updateCartridge" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceCartridgeDefinitionNotExistsException">
<<<<<<< HEAD
                <soap:fault use="literal" name="CloudControllerServiceCartridgeDefinitionNotExistsException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
=======
                <soap:fault use="literal" name="CloudControllerServiceCartridgeDefinitionNotExistsException"></soap:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"></soap:fault>
>>>>>>> Add deployment policy
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="startInstances">
<<<<<<< HEAD
            <soap:operation soapAction="urn:startInstances" style="document"/>
=======
            <soap:operation soapAction="urn:startInstances" style="document"></soap:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
<<<<<<< HEAD
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
=======
                <soap:body use="literal"></soap:body>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap:fault use="literal" name="CloudControllerServiceCloudControllerException"></soap:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"></soap:fault>
>>>>>>> Add deployment policy
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="startInstance">
            <soap:operation soapAction="urn:startInstance" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartition">
            <soap:operation soapAction="urn:getNetworkPartition" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"></soap:body>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="terminateInstances">
            <soap:operation soapAction="urn:terminateInstances" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidClusterException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getClusterContext">
            <soap:operation soapAction="urn:getClusterContext" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateClusterStatus">
            <soap:operation soapAction="urn:updateClusterStatus" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesHost">
            <soap:operation soapAction="urn:updateKubernetesHost" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesHostException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidKubernetesHostException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesHostException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesHostException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeServiceGroup">
            <soap:operation soapAction="urn:removeServiceGroup" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addNetworkPartition">
            <soap:operation soapAction="urn:addNetworkPartition" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionAlreadyExistsException">
                <soap:fault use="literal" name="CloudControllerServiceNetworkPartitionAlreadyExistsException"></soap:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesCluster">
            <soap:operation soapAction="urn:getKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeCartridge">
            <soap:operation soapAction="urn:removeCartridge" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartitions">
            <soap:operation soapAction="urn:getNetworkPartitions" style="document"></soap:operation>
            <wsdl:input>
                <soap:body use="literal"></soap:body>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal"></soap:body>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addCartridge">
            <soap:operation soapAction="urn:addCartridge" style="document"/>
            <wsdl:input>
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeAlreadyExistsException">
                <soap:fault use="literal" name="CloudControllerServiceCartridgeAlreadyExistsException"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:binding name="CloudControllerServiceSoap12Binding" type="ns:CloudControllerServicePortType">
<<<<<<< HEAD
        <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
=======
        <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"></soap12:binding>
        <wsdl:operation name="getDeploymentPolicies">
            <soap12:operation soapAction="urn:getDeploymentPolicies" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"></soap12:body>
            </wsdl:output>
        </wsdl:operation>
>>>>>>> Add deployment policy
        <wsdl:operation name="getCartridges">
            <soap12:operation soapAction="urn:getCartridges" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesMaster">
            <soap12:operation soapAction="urn:updateKubernetesMaster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesMasterException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidKubernetesMasterException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesMasterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesMasterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="validatePartition">
            <soap12:operation soapAction="urn:validatePartition" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="createApplicationClusters">
            <soap12:operation soapAction="urn:createApplicationClusters" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceApplicationClusterRegistrationException">
                <soap12:fault use="literal" name="CloudControllerServiceApplicationClusterRegistrationException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getDeploymentPolicy">
            <soap12:operation soapAction="urn:getDeploymentPolicy" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"></soap12:body>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesCluster">
            <soap12:operation soapAction="urn:removeKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="validateDeploymentPolicy">
            <soap12:operation soapAction="urn:validateDeploymentPolicy" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidPartitionException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidPartitionException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupCartridges">
            <soap12:operation soapAction="urn:getServiceGroupCartridges" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesCluster">
            <soap12:operation soapAction="urn:addKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addServiceGroup">
            <soap12:operation soapAction="urn:addServiceGroup" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="registerService">
            <soap12:operation soapAction="urn:registerService" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="terminateInstance">
            <soap12:operation soapAction="urn:terminateInstance" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap12:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidMemberException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidMemberException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroup">
            <soap12:operation soapAction="urn:getServiceGroup" style="document"/>
=======
        <wsdl:operation name="addDeployementPolicy">
            <soap12:operation soapAction="urn:addDeployementPolicy" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidDeploymentPolicyException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidDeploymentPolicyException"></soap12:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyAlreadyExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceDeploymentPolicyAlreadyExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupDependencies">
            <soap12:operation soapAction="urn:getServiceGroupDependencies" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupDependencies">
            <soap12:operation soapAction="urn:getServiceGroupDependencies" style="document"/>
=======
        <wsdl:operation name="getServiceGroupSubGroups">
            <soap12:operation soapAction="urn:getServiceGroupSubGroups" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupSubGroups">
            <soap12:operation soapAction="urn:getServiceGroupSubGroups" style="document"/>
=======
        <wsdl:operation name="getServiceGroup">
            <soap12:operation soapAction="urn:getServiceGroup" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeNetworkPartition">
            <soap12:operation soapAction="urn:removeNetworkPartition" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionNotExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceNetworkPartitionNotExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateNetworkPartition">
            <soap12:operation soapAction="urn:updateNetworkPartition" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionNotExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceNetworkPartitionNotExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getCartridgeInfo">
            <soap12:operation soapAction="urn:getCartridgeInfo" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesHost">
            <soap12:operation soapAction="urn:addKubernetesHost" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesHostException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidKubernetesHostException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="unregisterService">
            <soap12:operation soapAction="urn:unregisterService" style="document"/>
=======
        <wsdl:operation name="updateDeployementPolicy">
            <soap12:operation soapAction="urn:updateDeployementPolicy" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidDeploymentPolicyException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidDeploymentPolicyException"></soap12:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="createClusterInstance">
            <soap12:operation soapAction="urn:createClusterInstance" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceUnregisteredClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceUnregisteredClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="createClusterInstance">
            <soap12:operation soapAction="urn:createClusterInstance" style="document"/>
=======
        <wsdl:operation name="removeDeployementPolicy">
            <soap12:operation soapAction="urn:removeDeployementPolicy" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceDeploymentPolicyNotExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceDeploymentPolicyNotExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="unregisterService">
            <soap12:operation soapAction="urn:unregisterService" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceClusterInstanceCreationException">
                <soap12:fault use="literal" name="CloudControllerServiceClusterInstanceCreationException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getHostsForKubernetesCluster">
            <soap12:operation soapAction="urn:getHostsForKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesHost">
            <soap12:operation soapAction="urn:removeKubernetesHost" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesHostException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesHostException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesClusters">
            <soap12:operation soapAction="urn:getKubernetesClusters" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getMasterForKubernetesCluster">
            <soap12:operation soapAction="urn:getMasterForKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="updateCartridge">
<<<<<<< HEAD
            <soap12:operation soapAction="urn:updateCartridge" style="document"/>
=======
            <soap12:operation soapAction="urn:updateCartridge" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceCartridgeDefinitionNotExistsException">
<<<<<<< HEAD
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeDefinitionNotExistsException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
=======
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeDefinitionNotExistsException"></soap12:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"></soap12:fault>
>>>>>>> Add deployment policy
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="startInstances">
<<<<<<< HEAD
            <soap12:operation soapAction="urn:startInstances" style="document"/>
=======
            <soap12:operation soapAction="urn:startInstances" style="document"></soap12:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
<<<<<<< HEAD
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap12:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
=======
                <soap12:body use="literal"></soap12:body>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap12:fault use="literal" name="CloudControllerServiceCloudControllerException"></soap12:fault>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"></soap12:fault>
>>>>>>> Add deployment policy
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="startInstance">
            <soap12:operation soapAction="urn:startInstance" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceCloudControllerException">
                <soap12:fault use="literal" name="CloudControllerServiceCloudControllerException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeNotFoundException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeNotFoundException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartition">
            <soap12:operation soapAction="urn:getNetworkPartition" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"></soap12:body>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="terminateInstances">
            <soap12:operation soapAction="urn:terminateInstances" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getClusterContext">
            <soap12:operation soapAction="urn:getClusterContext" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateClusterStatus">
            <soap12:operation soapAction="urn:updateClusterStatus" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesHost">
            <soap12:operation soapAction="urn:updateKubernetesHost" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceInvalidKubernetesHostException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidKubernetesHostException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesHostException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesHostException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeServiceGroup">
            <soap12:operation soapAction="urn:removeServiceGroup" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidServiceGroupException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidServiceGroupException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="addNetworkPartition">
            <soap12:operation soapAction="urn:addNetworkPartition" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceNetworkPartitionAlreadyExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceNetworkPartitionAlreadyExistsException"></soap12:fault>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesCluster">
            <soap12:operation soapAction="urn:getKubernetesCluster" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="CloudControllerServiceNonExistingKubernetesClusterException">
                <soap12:fault use="literal" name="CloudControllerServiceNonExistingKubernetesClusterException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="removeCartridge">
            <soap12:operation soapAction="urn:removeCartridge" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeTypeException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeTypeException"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartitions">
            <soap12:operation soapAction="urn:getNetworkPartitions" style="document"></soap12:operation>
            <wsdl:input>
                <soap12:body use="literal"></soap12:body>
            </wsdl:input>
            <wsdl:output>
                <soap12:body use="literal"></soap12:body>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addCartridge">
            <soap12:operation soapAction="urn:addCartridge" style="document"/>
            <wsdl:input>
                <soap12:body use="literal"/>
            </wsdl:input>
            <wsdl:fault name="CloudControllerServiceInvalidCartridgeDefinitionException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidCartridgeDefinitionException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceInvalidIaasProviderException">
                <soap12:fault use="literal" name="CloudControllerServiceInvalidIaasProviderException"/>
            </wsdl:fault>
            <wsdl:fault name="CloudControllerServiceCartridgeAlreadyExistsException">
                <soap12:fault use="literal" name="CloudControllerServiceCartridgeAlreadyExistsException"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:binding name="CloudControllerServiceHttpBinding" type="ns:CloudControllerServicePortType">
<<<<<<< HEAD
        <http:binding verb="POST"/>
=======
        <http:binding verb="POST"></http:binding>
        <wsdl:operation name="getDeploymentPolicies">
            <http:operation location="getDeploymentPolicies"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:output>
        </wsdl:operation>
>>>>>>> Add deployment policy
        <wsdl:operation name="getCartridges">
            <http:operation location="getCartridges"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesMaster">
            <http:operation location="updateKubernetesMaster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="validatePartition">
            <http:operation location="validatePartition"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="createApplicationClusters">
            <http:operation location="createApplicationClusters"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getDeploymentPolicy">
            <http:operation location="getDeploymentPolicy"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesCluster">
            <http:operation location="removeKubernetesCluster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="validateDeploymentPolicy">
            <http:operation location="validateDeploymentPolicy"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupCartridges">
            <http:operation location="getServiceGroupCartridges"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesCluster">
            <http:operation location="addKubernetesCluster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addServiceGroup">
            <http:operation location="addServiceGroup"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="registerService">
            <http:operation location="registerService"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="terminateInstance">
            <http:operation location="terminateInstance"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroup">
            <http:operation location="getServiceGroup"/>
=======
        <wsdl:operation name="addDeployementPolicy">
            <http:operation location="addDeployementPolicy"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getServiceGroupDependencies">
            <http:operation location="getServiceGroupDependencies"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupDependencies">
            <http:operation location="getServiceGroupDependencies"/>
=======
        <wsdl:operation name="getServiceGroupSubGroups">
            <http:operation location="getServiceGroupSubGroups"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="getServiceGroupSubGroups">
            <http:operation location="getServiceGroupSubGroups"/>
=======
        <wsdl:operation name="getServiceGroup">
            <http:operation location="getServiceGroup"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="removeNetworkPartition">
            <http:operation location="removeNetworkPartition"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="updateNetworkPartition">
            <http:operation location="updateNetworkPartition"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getCartridgeInfo">
            <http:operation location="getCartridgeInfo"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addKubernetesHost">
            <http:operation location="addKubernetesHost"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="unregisterService">
            <http:operation location="unregisterService"/>
=======
        <wsdl:operation name="updateDeployementPolicy">
            <http:operation location="updateDeployementPolicy"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="createClusterInstance">
            <http:operation location="createClusterInstance"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="createClusterInstance">
            <http:operation location="createClusterInstance"/>
=======
        <wsdl:operation name="removeDeployementPolicy">
            <http:operation location="removeDeployementPolicy"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="unregisterService">
            <http:operation location="unregisterService"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getHostsForKubernetesCluster">
            <http:operation location="getHostsForKubernetesCluster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="removeKubernetesHost">
            <http:operation location="removeKubernetesHost"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesClusters">
            <http:operation location="getKubernetesClusters"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getMasterForKubernetesCluster">
            <http:operation location="getMasterForKubernetesCluster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateCartridge">
<<<<<<< HEAD
            <http:operation location="updateCartridge"/>
=======
            <http:operation location="updateCartridge"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="startInstances">
            <http:operation location="startInstances"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="startInstances">
            <http:operation location="startInstances"/>
=======
        <wsdl:operation name="startInstance">
            <http:operation location="startInstance"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
<<<<<<< HEAD
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="startInstance">
            <http:operation location="startInstance"/>
=======
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="getNetworkPartition">
            <http:operation location="getNetworkPartition"></http:operation>
>>>>>>> Add deployment policy
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="terminateInstances">
            <http:operation location="terminateInstances"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getClusterContext">
            <http:operation location="getClusterContext"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="updateClusterStatus">
            <http:operation location="updateClusterStatus"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="updateKubernetesHost">
            <http:operation location="updateKubernetesHost"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="removeServiceGroup">
            <http:operation location="removeServiceGroup"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="addNetworkPartition">
            <http:operation location="addNetworkPartition"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
        <wsdl:operation name="getKubernetesCluster">
            <http:operation location="getKubernetesCluster"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="removeCartridge">
            <http:operation location="removeCartridge"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
<<<<<<< HEAD
        <wsdl:operation name="addCartridge">
            <http:operation location="addCartridge"/>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"/>
            </wsdl:input>
        </wsdl:operation>
=======
>>>>>>> adding getApplicationPolicy web service, rest API and updating AS CC wsdls
        <wsdl:operation name="getNetworkPartitions">
            <http:operation location="getNetworkPartitions"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
            <wsdl:output>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="addCartridge">
            <http:operation location="addCartridge"></http:operation>
            <wsdl:input>
                <mime:content type="text/xml" part="parameters"></mime:content>
            </wsdl:input>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:service name="CloudControllerService">
        <wsdl:port name="CloudControllerServiceHttpSoap11Endpoint" binding="ns:CloudControllerServiceSoap11Binding">
<<<<<<< HEAD
            <soap:address location="http://localhost:8080/axis2/services/CloudControllerService"/>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpSoap12Endpoint" binding="ns:CloudControllerServiceSoap12Binding">
            <soap12:address location="http://localhost:8080/axis2/services/CloudControllerService"/>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpEndpoint" binding="ns:CloudControllerServiceHttpBinding">
            <http:address location="http://localhost:8080/axis2/services/CloudControllerService"/>
=======
            <soap:address location="http://172.17.42.1:9763/services/CloudControllerService.CloudControllerServiceHttpSoap11Endpoint/"></soap:address>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpsSoap11Endpoint" binding="ns:CloudControllerServiceSoap11Binding">
            <soap:address location="https://172.17.42.1:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap11Endpoint/"></soap:address>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpSoap12Endpoint" binding="ns:CloudControllerServiceSoap12Binding">
            <soap12:address location="http://172.17.42.1:9763/services/CloudControllerService.CloudControllerServiceHttpSoap12Endpoint/"></soap12:address>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpsSoap12Endpoint" binding="ns:CloudControllerServiceSoap12Binding">
            <soap12:address location="https://172.17.42.1:9443/services/CloudControllerService.CloudControllerServiceHttpsSoap12Endpoint/"></soap12:address>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpEndpoint" binding="ns:CloudControllerServiceHttpBinding">
            <http:address location="http://172.17.42.1:9763/services/CloudControllerService.CloudControllerServiceHttpEndpoint/"></http:address>
        </wsdl:port>
        <wsdl:port name="CloudControllerServiceHttpsEndpoint" binding="ns:CloudControllerServiceHttpBinding">
            <http:address location="https://172.17.42.1:9443/services/CloudControllerService.CloudControllerServiceHttpsEndpoint/"></http:address>
>>>>>>> Add deployment policy
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>
