/*
 * Licensed to the Apache Software Foundation (ASF) under one 
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied.  See the License for the 
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.stratos.messaging.domain.topology.Service;
import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.AutoscalerContext;
import org.apache.stratos.autoscaler.ClusterContext;
import org.apache.stratos.autoscaler.Constants;
import org.apache.stratos.autoscaler.policy.PolicyManager;
import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
import org.apache.stratos.autoscaler.policy.model.Partition;
import org.apache.stratos.autoscaler.policy.model.HAPolicy;
import org.apache.stratos.autoscaler.policy.model.RequestsInFlight;
import org.apache.stratos.autoscaler.policy.model.LoadThresholds;
import org.apache.stratos.autoscaler.client.cloud.controller.CloudControllerClient;
import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;
import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;
import org.apache.stratos.autoscaler.algorithm.RoundRobin;
import org.apache.stratos.autoscaler.message.receiver.TopologyManager;
import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
import org.apache.commons.logging.Log;

global org.apache.stratos.autoscaler.policy.PolicyManager $manager;
global org.apache.stratos.autoscaler.AutoscalerContext $context; 
global org.apache.commons.logging.Log log;
global org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator $evaluator;
global org.apache.stratos.messaging.domain.topology.Topology $topology;

rule "Minimum Rule"
dialect "mvel"

	when
        $service : Service ()
        cluster : Cluster () from  $service.getClusters()
        $policy : AutoscalePolicy(id == cluster.autoscalePolicyName ) from $manager.getPolicyList()
        $partition : Partition () from $policy.getHAPolicy().getPartitions()

	then
        String clusterId = cluster.getClusterId();

        ClusterContext clusterContext = $context.getClusterContext(clusterId);

        if(null==clusterContext){

            //get values from policy
            LoadThresholds loadThresholds = $policy.getLoadThresholds();
            float averageLimit = loadThresholds.getRequestsInFlight().getAverage();
            float gradientLimit = loadThresholds.getRequestsInFlight().getGradient();
            float secondDerivative  = loadThresholds.getRequestsInFlight().getSecondDerivative();

            clusterContext = new ClusterContext(clusterId, cluster.getServiceName()) ;

            clusterContext.setRequestsInFlightGradient(gradientLimit);
            clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
            clusterContext.setAverageRequestsInFlight(averageLimit);

            AutoscalePolicy policy = PolicyManager.getInstance().getPolicy(cluster.getAutoscalePolicyName());

             //for(Partition partition: $policy.getHAPolicy().getPartitions()){
             //       clusterContext.addPartitionCount(partition.getId(), 0);
             //}
             $context.addClusterContext(clusterContext);
        }

        //int currentMemberCount = clusterContext.getPartitionCount($partition.getId());
        int currentMemberCount = clusterContext.getMemberCount();
        int partitionMin = $partition.getPartitionMembersMin();

        if(currentMemberCount < partitionMin) {

            int memberCountToBeIncreased = partitionMin - currentMemberCount;
            if($evaluator.delegateSpawn($partition,clusterId, memberCountToBeIncreased)){
            }

        }


end

rule "Autoscaler Rule"
    dialect "mvel"
	when
        $service : Service ()
        cluster : Cluster () from  $service.getClusters()
        $policy : AutoscalePolicy(id == cluster.autoscalePolicyName ) from $manager.getPolicyList()

	then

	    String clusterId = cluster.getClusterId();

        LoadThresholds loadThresholds = $policy.getLoadThresholds();
        float averageLimit = loadThresholds.getRequestsInFlight().getAverage();
        float gradientLimit = loadThresholds.getRequestsInFlight().getGradient();
        float secondDerivative  = loadThresholds.getRequestsInFlight().getSecondDerivative();

		ClusterContext clusterContext = $context.getClusterContext(clusterId);

		if(null==clusterContext){

     	    clusterContext = new ClusterContext(cluster.getClusterId(), cluster.getServiceName()) ;


            clusterContext.setRequestsInFlightGradient(gradientLimit);
            clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
            clusterContext.setAverageRequestsInFlight(averageLimit);

            //for(Partition partition: $policy.getHAPolicy().getPartitions()){
            //    clusterContext.addPartitionCount(partition.getId(), 0);
            //}
            $context.addClusterContext(clusterContext);

        }

        //get current stats from cluster context
        float lbStatAverage = clusterContext.getAverageRequestsInFlight();
        float lbStatGradient = clusterContext.getRequestsInFlightGradient();
        float lbStatSecondDerivative = clusterContext.getRequestsInFlightSecondDerivative();

        //get values from policy
        LoadThresholds loadThresholds = $manager.getPolicy(cluster.autoscalePolicyName).getLoadThresholds();
        float averageLimit = loadThresholds.getRequestsInFlight().getAverage();
        float gradientLimit = loadThresholds.getRequestsInFlight().getGradient();
        float secondDerivative  = loadThresholds.getRequestsInFlight().getSecondDerivative()
        //String partitionAlgorithm = $manager.getPolicy(cluster.autoscalePolicyName).getHAPolicy().getPartitionAlgo();


        //AutoscaleAlgorithm autoscaleAlgorithm = null;
        //if(Constants.ROUND_ROBIN_ALGORITHM_ID.equals(partitionAlgorithm)){

        //    autoscaleAlgorithm = new RoundRobin();
        //} else if(Constants.ONE_AFTER_ANOTHER_ALGORITHM_ID.equals(partitionAlgorithm)){

        //    autoscaleAlgorithm = new OneAfterAnother();
        //}

            float scaleDownSlowerMarginOfGradient = 1.0;     //TODO get from config
            float scaleDownSlowerMarginOfSecondDerivative = 0.2;  //TODO get from config

        Partition partition = $policy.getHAPolicy().getPartitions().get(0);

        if(lbStatAverage > averageLimit && lbStatGradient > gradientLimit && lbStatSecondDerivative > secondDerivative){

            int i = 0;
            //TODO Partition partition = autoscaleAlgorithm.getScaleUpPartition(clusterId);

            if(partition != null){

                    $evaluator.delegateSpawn(partition,clusterId);

                    clusterContext.setRequestsInFlightGradient(gradientLimit);
                    clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
                    clusterContext.setAverageRequestsInFlight(averageLimit);
                    //spawnInstances One

            }
        } else if(lbStatAverage < averageLimit  && lbStatGradient < gradientLimit - scaleDownSlowerMarginOfSecondDerivative
            && lbStatSecondDerivative < secondDerivative - scaleDownSlowerMarginOfSecondDerivative){

            //terminate one
            //TODO Partition partition = autoscaleAlgorithm.getScaleDownPartition(clusterId);
            if(partition != null){
                $evaluator.delegateTerminate(partition,clusterId);

                clusterContext.setRequestsInFlightGradient(gradientLimit);
                clusterContext.setRequestsInFlightSecondDerivative(secondDerivative);
                clusterContext.setAverageRequestsInFlight(averageLimit);
            }
        }


end