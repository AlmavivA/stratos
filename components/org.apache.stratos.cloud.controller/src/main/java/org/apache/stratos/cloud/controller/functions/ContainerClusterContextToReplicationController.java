/*
 * Licensed to the Apache Software Foundation (ASF) under one 
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied.  See the License for the 
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.stratos.cloud.controller.functions;

import org.apache.stratos.cloud.controller.context.CloudControllerContext;
import org.apache.stratos.cloud.controller.domain.ClusterContext;
import org.apache.stratos.cloud.controller.domain.ContainerClusterContext;
import org.apache.stratos.cloud.controller.domain.MemberContext;
import org.apache.stratos.kubernetes.client.model.Container;
import org.apache.stratos.kubernetes.client.model.Labels;
import org.apache.stratos.kubernetes.client.model.Manifest;
import org.apache.stratos.kubernetes.client.model.Pod;
import org.apache.stratos.kubernetes.client.model.ReplicationController;
import org.apache.stratos.kubernetes.client.model.Selector;
import org.apache.stratos.kubernetes.client.model.State;

import com.google.common.base.Function;

/**
 * Is responsible for converting a {@link org.apache.stratos.cloud.controller.domain.MemberContext} object to a Kubernetes
 * {@link ReplicationController} object:
 * - A replication controller is created for each cluster but uses the same environment variables
 * generated by the member context, hence using member context.
 */
public class ContainerClusterContextToReplicationController implements
        Function<MemberContext, ReplicationController> {

    @Override
    public ReplicationController apply(MemberContext memberContext) {

        ReplicationController replicationController = new ReplicationController();
        replicationController.setId(memberContext.getClusterId());
        replicationController.setKind("ReplicationController");
        replicationController.setApiVersion("v1beta1");

        State state = new State();
        state.setReplicas(1);
        Selector selector = new Selector();
        selector.setName(memberContext.getClusterId());
        state.setReplicaSelector(selector);

        Pod podTemplate = new Pod();
        State podState = new State();
        Manifest manifest = new Manifest();
        manifest.setVersion("v1beta1");
        manifest.setId(memberContext.getClusterId());
        podTemplate.setState(podState);

        // Add container to the manifest
        ContainerClusterContextToKubernetesContainer containerFunc = new ContainerClusterContextToKubernetesContainer();
        Container container = containerFunc.apply(memberContext);
        manifest.addContainer(container);
        podState.setManifest(manifest);

        // Set pod labels
        Labels podLabels = new Labels();
        podLabels.setName(memberContext.getClusterId());
        podTemplate.setLabels(podLabels);

        state.setPodTemplate(podTemplate);
        replicationController.setDesiredState(state);

        // Set replication controller labels
        Labels replicatoionControllerLabels = new Labels();
        replicatoionControllerLabels.setName(memberContext.getClusterId());
        replicationController.setLabels(replicatoionControllerLabels);

        return replicationController;
    }

}
