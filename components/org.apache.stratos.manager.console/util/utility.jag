<%

function E4XtoJSON(xml, ignored) {
    var r, children = xml.*, attributes = xml.@*, length = children.length();
    if(length == 0) {
        r = xml.toString();
    } else if(length == 1) {
        var text = xml.text().toString();
        if(text) {
            r = text;
        }
    }
    if(r == undefined) {
        r = {};
        for each (var child in children) {
             var name = child.localName();
             var json = E4XtoJSON(child, ignored);
             var value = r[name];
             if(value) {
               if(value.length) {
                 value.push(json);
               } else {
                 r[name] = [value, json]
               }
             } else {
               r[name] = json;
             }
        }
    }
    if(attributes.length()) {
        var a = {}, c = 0;
        for each (var attribute in attributes) {
          var name = attribute.localName();
          if(ignored && ignored.indexOf(name) == -1) {
            a["_" + name] = attribute.toString();
            c ++;
          }
        }
        if(c) {
          if(r) a._ = r;
          return a;
        }
    }
    return r;
}

function sortNumber(jsonArray, property, ascending, zeroLast) {
    jsonArray.sort(function (a, b) {
        var aProp = parseFloat(a[property]);
        var bProp = parseFloat(b[property]);

        if(zeroLast){
             if(aProp == 0){
                aProp = 500000;
             }
             if(bProp == 0 ){
                bProp = 500000;
             }
        }

        return aProp === bProp ? 0 : ( ascending ? (aProp >= bProp ? 1 : -1 ) : (aProp >= bProp ? -1 : 1 ));
    });

    return jsonArray;
}




function getServerUrl(){
    var serverUrl = "https://localhost:9453/services";
    serverUrl = serverUrl + "/UserProfileMgtService";

    return serverUrl;
}

function getAuthenticationHeader(){
    return {"Authorization": "Basic YWRtaW46YWRtaW4="};
}

function getBackendServerURL(){
    var config = require('/config/console.json');
    return config.backendServerConfiguration.url;
}

consoleAppUtil = new function(){
    var log = new Log();

    this.getAvailableCartridges = function(){
        return this.makeRequest()
    };


    this.makeRequest = function(httpMethod,urlPostFix,data){
        var endpoint = getBackendServerURL() + urlPostFix;
        var headers = getAuthenticationHeader();
        var type="json";
        if(log.isDebugEnabeld()){
            log.debug("HTTPMethod : " + httpMethod);
            log.debug("HTTPEndpoint : "+endpoint);
            log.debug("HTTPHeaders : "+headers);
        }
        var response;
        switch(httpMethod){
            case "GET":
               response = get(endpoint,data,headers,type);
                break;
            case "POST":
                response = post(endpoint,data,headers,type);
                break;
            case "DELETE":
                response = del(endpoint,data,headers,type);
                break;
            case "PUT":
                response = put(endpoint,data,headers,type);
                break;
            default :
                response = {"data":"wrong data"}; // TODO: proper error handling.
        }
        log.info(response.data);
        return response;
    };
};



%>