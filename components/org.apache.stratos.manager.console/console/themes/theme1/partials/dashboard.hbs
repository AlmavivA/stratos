<div id="canvas_container"></div>

<div class="breadcrumb-strip-sub">
<div class="container">
    <!-- Example row of columns -->
    <div class="row">
        <div class="col-lg-12">
            <div class="detail-strip">
                <h1 class="pull-left">ESB Cluster</h1>
                <nav class="navbar navbar-inverse pull-left affix-menu" role="navigation">
                    <!-- Brand and toggle get grouped for better mobile display -->

                    <!-- Collect the nav links, forms, and other content for toggling -->
                    <div class="collapse navbar-collapse">
                        <ul class="nav navbar-nav">
                            <li class="active"><a href="#">Nodes</a></li>
                            <li><a href="#">Patches</a></li>
                            <li><a href="#">Details</a></li>
                        </ul>
                    </div>
                    <!-- /.navbar-collapse -->
                </nav>
                <div class="btn-toolbar pull-right detail-menu">
                    <div class="btn-group">
                        <button class="btn btn-danger"><i class="icon-power-off"></i> Shoutdown</button>
                        <button class="btn"><i class="icon-repeat"></i> Restart with (Policy 2)</button>
                        <button class="btn dropdown-toggle" data-toggle="dropdown" tabindex="-1">
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a href="#">Restart Policy 1</a></li>
                            <li><a href="#">Restart Policy 2</a></li>
                            <li><a href="#">Restart Policy 3</a></li>
                            <li class="divider"></li>
                            <li><a href="#">Create New Policy</a></li>
                        </ul>
                    </div>
                </div>
                <div style="clear:both"></div>
            </div>
            <div class="detail-strip" style="padding-top:10px;">
            </div>
        </div>
    </div>
</div>
</div>

<div class="container content-section-wrapper">
<div class="row">
    <div class="col-lg-12 content-section">
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <h2>Nodes</h2>
                    <table class="table table-striped table-bordered">
                        <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th>Up Time</th>
                            <th>Load Averages</th>
                            <th>%CPU</th>
                            <th>%Mem</th>
                            <th>Faults/Requests</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td class="col-lg-1"><i class="icon-check"></i></td>
                            <td><a>N1</a></td>
                            <td>3h:20m:10s</td>
                            <td>0.65 0.42 0.36</td>
                            <td>15</td>
                            <td>25</td>
                            <td>0/4000</td>
                        </tr>
                        <tr>
                            <td class="col-lg-1"><i class="icon-check"></i></td>
                            <td><a>N2</a></td>
                            <td>3h:20m:10s</td>
                            <td>0.65 0.42 0.36</td>
                            <td>15</td>
                            <td>25</td>
                            <td>0/4000</td>
                        </tr>
                        <tr>
                            <td class="col-lg-1"><i class="icon-check"></i></td>
                            <td><a>N3</a></td>
                            <td>3h:20m:10s</td>
                            <td>0.65 0.42 0.36</td>
                            <td>15</td>
                            <td>25</td>
                            <td>0/4000</td>
                        </tr>
                        </tbody>
                    </table>
                    <h2 class="pull-left">Patches</h2>
                    <div class="btn-toolbar pull-right" style="margin-top:19px;">
                        <div class="btn-group">
                            <button class="btn"><i class="icon-repeat"></i> Refresh</button>
                            <button class="btn"><i class="icon-trash"></i> Remove</button>
                        </div>
                    </div>
                    <table class="table table-striped table-bordered">
                        <thead>
                        <tr>
                            <th class="col-lg-1"><input type="checkbox"/></th>
                            <th class="col-lg-11">Patch Name</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td><input type="checkbox"/></td>
                            <td>patch-001</td>
                        </tr>
                        </tbody>
                    </table>

                    <h2>Details</h2>
                    <table class="table table-striped table-bordered">

                        <tbody>
                        <tr>
                            <td>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </td>
                        </tr>
                        <tr>
                            <td>Curabitur nec velit sed augue molestie posuere ut nec odio.  </td>
                        </tr>
                        <tr>
                            <td>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </td>
                        </tr>
                        <tr>
                            <td>Curabitur nec velit sed augue molestie posuere ut nec odio.  </td>
                        </tr>
                        <tr>
                            <td>Lorem ipsum dolor sit amet, consectetur adipiscing elit. </td>
                        </tr>
                        <tr>
                            <td>Curabitur nec velit sed augue molestie posuere ut nec odio.  </td>
                        </tr>
                        </tbody>
                    </table>


                </div>
                <div class="col-lg-6">
                    <h2>CPU/Memory Usage</h2>
                    <div id="mem_cup_chart"></div>



                </div>
            </div>
        </div>


    </div>
</div>
</div>
<script>
var paper,paper_chart;

var ELB_WIDTH = 200;
var ELB_HEIGHT = 60;
var ELB_ROUND = 10;
//down colors
var NODE_DOWN_FILL = "90-#d0d0d0-#e6e6e6";
var NODE_DOWN_OVER_FILL = "#fafafa";

//ELB colors
var ELB_UP_FILL = "90-#ffb100-#ff8900";
var ELB_UP_OVER_FILL = "#ff9226";

//Cluster colors
var CLUSTER_UP_FILL = "90-#007eff-#007edd";
var CLUSTER_UP_OVER_FILL = "#00b9ff";

//Error colors
var ERROR_FILL = "90-#ff221a-#ba0600";
var ERROR_OVER_FILL = "#ff221a";

var DARK_TXT_COLOR = '#404040';
var LIGHT_TXT_COLOR = '#FFFFFF';

var INIT_X = 15;
var INIT_Y = 30;

var UP_TIME_TITLE = "Up Time";
var DOWN_TIME_TITLE = "Down Time";

var NODE_SHIFT_H = 250;
var NODE_SHIFT_V = 200;
var NODE_SHIFT_V_SUB = 80;

var LINE_COLOR = "#91de02";

var CIRCLE_FILL = ["#dcff9b","#ff9bfc","#fec5ac"];
var CIRCLE_STROKE = ["#91de02","#c402de","#de4402"];

var draw_node = function(cnode){
    var rectangleSet = paper.set();
    var rectangle = paper.rect(cnode.x, cnode.y, ELB_WIDTH+10, ELB_HEIGHT+10, 10);
    var mainFill = NODE_DOWN_FILL;
    var txtColor = DARK_TXT_COLOR;
    var titleTxtColor = DARK_TXT_COLOR;

    if(cnode.state == "up"){
        if(cnode.nodeType == 'elb'){
            mainFill = ELB_UP_FILL;
        }else{
            mainFill = CLUSTER_UP_FILL;
        }
        txtColor = LIGHT_TXT_COLOR;
        titleTxtColor = LIGHT_TXT_COLOR;
    }else if(cnode.state == "error"){
        titleTxtColor = LIGHT_TXT_COLOR;
        txtColor = DARK_TXT_COLOR;
        mainFill = ERROR_FILL;
    }


    rectangle.attr({fill:mainFill,stroke:'#259cbc','stroke-width':0, 'stroke-linejoin':'round'});
    rectangle.glow({"width":7,"color":"#000000","offsetx":3,"offsety":3,"fill":true});

    if(cnode.nodeType == "node"){
        var rectangle_sub = paper.rect(cnode.x+5, cnode.y+20, rectangle.getBBox().width-10, rectangle.getBBox().height-20, 10);
        rectangle_sub.attr({fill:'#fff',stroke:'#259cbc','stroke-width':0, 'stroke-linejoin':'round'});
        rectangle_sub.glow({"width":7,"color":"#000000","offsetx":3,"offsety":3,"fill":true});
    }
    //elb title
    var word_elb = paper.text(rectangle.getBBox().x , rectangle.getBBox().y + 10,cnode.title).attr({"font-size":13,fill:titleTxtColor,stroke:"none"});
    word_elb.translate(rectangle.getBBox().width/2,0);

    //up time title
    var word_up_time = paper.text(rectangle.getBBox().x, rectangle.getBBox().y + 15, cnode.time_title).attr({"font-size": 10, fill: '#000', stroke: "none"});
    word_up_time.translate(word_up_time.getBBox().width/2+5, 15);

    //up time value
    var word_up_time_value = paper.text(rectangle.getBBox().x, rectangle.getBBox().y + 15, cnode.time_value).attr({"font-size": 11, fill: txtColor, stroke: "none"});
    word_up_time_value.translate(word_up_time_value.getBBox().width/2+5, 30);

    //cup%
    var word_cpu = paper.text(rectangle.getBBox().x+10, rectangle.getBBox().y + 15, '%CPU').attr({"font-size": 10, fill: '#000', stroke: "none"});
    word_cpu.translate(rectangle.getBBox().width/2-word_cpu.getBBox().width/2, 15);


    //value cup%
    var value_cpu = paper.text(rectangle.getBBox().x+10, rectangle.getBBox().y + 15, '20').attr({"font-size": 10, fill: txtColor, stroke: "none"});
    value_cpu.translate(rectangle.getBBox().width/2-word_cpu.getBBox().width/2, 30);

    //algo title
    var word_policy = paper.text(rectangle.getBBox().x+10, rectangle.getBBox().y + 15, cnode.policy).attr({"font-size": 10, fill: '#000', stroke: "none"});
    word_policy.translate(rectangle.getBBox().width*2/3+word_policy.getBBox().width*1/3, 15);

    if(cnode.state == "up"){
        var rectangle_btn_sd = paper.rect(word_policy.getBBox().x, word_policy.getBBox().y + 15, 23, 17, 0);
        rectangle_btn_sd.attr({fill:'url({{url "/themes/theme1/ui/img/btn-down.png"}})','stroke-width':0});

        var rectangle_btn_restart = paper.rect(word_policy.getBBox().x+30, word_policy.getBBox().y + 15, 23, 17, 0);
        rectangle_btn_restart.attr({fill:'url({{url "/themes/theme1/ui/img/btn-restart.png"}})','stroke-width':0});

        rectangleSet.push(rectangle, word_elb,word_up_time,word_up_time_value,word_policy);

        rectangle_btn_sd.mouseup(executeAction({elem:cnode,action:'shout_down'}));
        rectangle_btn_restart.mouseup(executeAction({elem:cnode,action:'restart'}));
    }else{
        var rectangle_btn_start = paper.rect(word_policy.getBBox().x, word_policy.getBBox().y + 15, 23, 17, 0);
        rectangle_btn_start.attr({fill:'url({{url "/themes/theme1/ui/img/btn-start.png"}})','stroke-width':0});
        rectangleSet.push(rectangle, word_elb,word_up_time,word_up_time_value,word_policy);

        rectangle_btn_start.mouseup(executeAction({elem:cnode,action:'start'}));
    }
    if(cnode.nodeType == "node"){
        rectangleSet.push(rectangle_sub);
    }
    rectangleSet.state = cnode.state;
    rectangleSet.nodeType = cnode.nodeType;

    rectangleSet.mouseup(loadNode(cnode.title));
    rectangleSet.mouseover(elbMouseOverHandler(rectangleSet));
    rectangleSet.mouseout(elbMouseOutHandler(rectangleSet));
};

var draw_connector = function(elb,cluster){
    var x1 = elb.x+ELB_WIDTH/2;
    var y1 =  elb.y+ELB_HEIGHT+10;

    var x2 = cluster.x+ELB_WIDTH/2;
    var y2 = cluster.y-10;

    var linePath = paper.path("M " + x1 + " " + y1 + " L " + x2 + " " + y2).attr({'stroke':CIRCLE_STROKE[elb.index],'stroke-width':3});
    var c1 = paper.circle(x1, y1, 10).attr({fill: CIRCLE_FILL[elb.index],stroke:CIRCLE_STROKE[elb.index],'stroke-width':4});
    var c2 = paper.circle(x2, y2, 10).attr({fill: CIRCLE_FILL[elb.index],stroke:CIRCLE_STROKE[elb.index],'stroke-width':4});
};
$(document).ready(function(){
    var data_cluster= $.parseJSON('{{clusters}}'),data_elb=$.parseJSON('{{elbs}}');
    paper = new Raphael(document.getElementById('canvas_container'), 1000, 500);
    var maxNodesForCluster = 0;
    var clustersDrew = [];
    var clustersDrewNodes = [];
    for (var i = 0; i < data_elb.length; i++) {
        //drawing the elb
        if (i == 0) {
            data_elb[0].x = INIT_X;
        } else {
            data_elb[i].x = data_elb[i - 1].x + NODE_SHIFT_H*data_elb[i - 1].clustersForElb;
        }
        if (data_elb[i].state == "down") {
            draw_node({x: data_elb[i].x, y: INIT_Y, title: data_elb[i].name, time_title: DOWN_TIME_TITLE, time_value: data_elb[i].down_time, policy: data_elb[i].policy, state: data_elb[i].state, nodeType: 'elb'});
        } else {
            draw_node({x: data_elb[i].x, y: INIT_Y, title: data_elb[i].name, time_title: UP_TIME_TITLE, time_value: data_elb[i].up_time, policy: data_elb[i].policy, state: data_elb[i].state, nodeType: 'elb'});
        }
        data_elb[i].y = INIT_Y;
        data_elb[i].index = i;
        //drawing the clusters
        var clustersForElb = 0;
        for (var j = 0; j < data_cluster.length; j++) {
            var foundIndex = searchStringInArray(data_elb[i].id, data_cluster[j].elb);
            if (foundIndex != -1) {
                var clusterIndex = searchStringInArray(data_cluster[j].id, clustersDrew);
                if (clusterIndex == -1) {
                    clustersForElb++;
                    var cx = data_elb[i].x;
                    if (data_elb[i].cluster_x != undefined) {
                        cx = data_elb[i].cluster_x + NODE_SHIFT_H;
                    }
                    data_elb[i].cluster_x = cx;
                    if (data_cluster[j].state == "down") {
                        draw_node({x: cx, y: INIT_Y + NODE_SHIFT_V, title: data_cluster[j].name, time_title: DOWN_TIME_TITLE, time_value: data_cluster[j].down_time, policy: data_cluster[j].policy, state: data_cluster[j].state, nodeType: 'cluster'});
                    } else {
                        draw_node({x: cx, y: INIT_Y + NODE_SHIFT_V, title: data_cluster[j].name, time_title: UP_TIME_TITLE, time_value: data_cluster[j].up_time, policy: data_cluster[j].policy, state: data_cluster[j].state, nodeType: 'cluster'});
                    }
                    //Draw a connector
                    data_cluster[j].x = cx;
                    data_cluster[j].y = INIT_Y + NODE_SHIFT_V;
                    draw_connector(data_elb[i], data_cluster[j]);

                    // Drawing cluster nodes
                    var data_node = data_cluster[j].nodes;
                    if (maxNodesForCluster < data_node.length) {
                        maxNodesForCluster = data_node.length;
                    }
                    for (var k = 0; k < data_node.length; k++) {
                        var nx, ny;
                        if (k == 0) {
                            nx = data_cluster[j].x;
                            ny = data_cluster[j].y + NODE_SHIFT_V_SUB;
                        } else {
                            nx = data_node[k - 1].x;
                            ny = data_node[k - 1].y + NODE_SHIFT_V_SUB;
                        }
                        data_node[k].x = nx;
                        data_node[k].y = ny;

                        if (data_node[k].state == "down") {
                            draw_node({x: nx, y: ny, title: data_node[k].name, time_title: DOWN_TIME_TITLE, time_value: data_node[k].down_time, policy: data_node[k].policy, state: data_node[k].state, nodeType: 'node'});
                        } else {
                            draw_node({x: nx, y: ny, title: data_node[k].name, time_title: UP_TIME_TITLE, time_value: data_node[k].up_time, policy: data_node[k].policy, state: data_node[k].state, nodeType: 'node'});
                        }
                    }
                    clustersDrew.push(data_cluster[j].id);
                    clustersDrewNodes.push(data_cluster[j]);
                }else{
                    //draw the connector
                    draw_connector(data_elb[i], clustersDrewNodes[clusterIndex]);
                }
            }
        }
        data_elb[i].clustersForElb = clustersForElb;
    }
    //draw_node({x:15,y:30,title:'ELB1',time_title:'Up Time',time_value:'3h:25m:10s',algo:'Round Robin',state:'',nodeType:'elb'});
    //draw_node({x:330,y:30,title:'ELB1',time_title:'Up Time',time_value:'3h:25m:10s',algo:'Round Robin',state:'up',nodeType:'elb'});

    //draw_node({x: 15, y: 230, title: 'ESB Cluster', time_title: 'Up Time', time_value: '3h:25m:10s', policy: 'Round Robin', state: 'up', nodeType: 'cluster'});


    // Resize the canves
    var paperHeight = 350 + 80*maxNodesForCluster;
    paper.setSize(1000,paperHeight);

});

var elbMouseOverHandler = function (rect) {
    return function() {
        if(rect.state == "up"){
            if(rect.nodeType=="elb"){
                rect[0].attr({ "stroke-width": 2,"stroke":'#ff000', "fill" :ELB_UP_OVER_FILL });
            }else if(rect.nodeType=="cluster"){
                rect[0].attr({ "stroke-width": 2,"stroke":'#ff000', "fill" :CLUSTER_UP_OVER_FILL });
            }
        } else if (rect.state == "error") {
            rect[0].attr({ "stroke-width": 0, "fill": ERROR_OVER_FILL});
        } else {
            rect[0].attr({ "stroke-width": 2, "stroke": '#a5a5a5', "fill": NODE_DOWN_OVER_FILL});
        }
    }
};


var elbMouseOutHandler = function (rect) {
    return function () {
        if (rect.state == "up") {
            if (rect.nodeType == "elb") {
                rect[0].attr({ "stroke-width": 0, "fill": ELB_UP_FILL});
            } else if (rect.nodeType == "cluster") {
                rect[0].attr({ "stroke-width": 0, "fill": CLUSTER_UP_FILL});
            }
        } else if(rect.state == "error"){
            rect[0].attr({ "stroke-width": 0, "fill": ERROR_FILL});
        } else {
            rect[0].attr({ "stroke-width": 0, "fill": NODE_DOWN_FILL});

        }
    }
};
function loadNode(newState){
    var tmpState = newState;
    return function(){
        alert('chanaing lifecycle state to ' + tmpState);
    }
}

function executeAction(info){
    var tmpInfo = info;
    return function(event){
        alert('Action is ' + tmpInfo.action + ' - Node is ' + tmpInfo.elem.title);
    }
}
function searchStringInArray (str, strArray) {
    for (var j=0; j<strArray.length; j++) {
        if (strArray[j].match(str)) return j;
    }
    return -1;
}

///////////////////////////////////////////////
// Drawing the chart
///////////////////////////////////////////////
var CHART_BACK_COLOR = "90-#161616-#3a3a3a";
var CPU_COLOR = "#ff0079";
var MEM_COLOR = "#91df03";
var LEGEND_BACK_COLOR = "#464646";
var LEGEND_FONT_COLOR = "#999999";
var GRID_LINE_COLOR = "#373737";
var CHART_WIDTH = 540;
var CHART_HEIGHT = 350;
var TIME_LABELS_COUNT = 6;
$(document).ready(
        function(){
            $.ajax({
                dataType: "json",
                url: '{{url "/data/node_mem_cpu.json"}}',
                data: 'foo=bar',
                success: function (data) {
                    paper_chart = new Raphael(document.getElementById('mem_cup_chart'), CHART_WIDTH, CHART_HEIGHT);
                    var paper_chart_rect = paper_chart.rect(0, 0, CHART_WIDTH, CHART_HEIGHT, 6).attr({"fill": CHART_BACK_COLOR});
                    //top title
                    paper_chart.text(CHART_WIDTH/2, 20, "Total number of nodes:"+data.length).attr({"font-size": 10, fill: '#fff', stroke: "none"});
                    //legend
                    var legend_rect = paper_chart.rect(5, CHART_HEIGHT-25, CHART_WIDTH-10,20 , 5).attr({"fill":LEGEND_BACK_COLOR});
                    var elemX = legend_rect.getBBox().x+10;
                    var elemY = legend_rect.getBBox().y+10;


                    var l1 = paper_chart.path('M ' + elemX + ' ' + elemY + ' L ' + (elemX+10) + ' ' + elemY ,3).attr({'stroke':CPU_COLOR,'stroke-width':3});
                    elemX += l1.getBBox().width + 5;

                    var l2 = paper_chart.text(elemX,elemY,"Avg CPU Usage(%)").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                    l2.translate(l2.getBBox().width/2,0);
                    elemX += l2.getBBox().width + 10;

                    var l3 = paper_chart.circle(elemX, elemY,3).attr({"fill":CPU_COLOR, stroke:"none"});
                    elemX += l3.getBBox().width + 5;

                    var l4 = paper_chart.text(elemX,elemY,"CPU Usage By Node(%)").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                    l4.translate(l4.getBBox().width/2,0);
                    elemX += l4.getBBox().width + 10;


                    var l5 = paper_chart.path('M ' + elemX + ' ' + elemY + ' L ' + (elemX+10) + ' ' + elemY ,3).attr({'stroke':MEM_COLOR,'stroke-width':3});
                    elemX += l5.getBBox().width + 5;

                    var l6 = paper_chart.text(elemX,elemY,"Avg Mem Usage(%)").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                    l6.translate(l6.getBBox().width/2,0);
                    elemX += l6.getBBox().width + 10;

                    var l7 = paper_chart.circle(elemX, elemY,3).attr({"fill":MEM_COLOR, stroke:"none"});
                    elemX += l7.getBBox().width + 5;

                    var l8 = paper_chart.text(elemX,elemY,"Mem Usage By Node(%)").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                    l8.translate(l8.getBBox().width/2,0);
                    elemX += l8.getBBox().width + 10;

                    //Drawing the grid
                    var percentage_labels = [0,20,40,60,80];
                    var grid_height = CHART_HEIGHT - 50;
                    var grid_width = CHART_WIDTH - 40;
                    var chart_x0 = 50;
                    var chart_y0 = 0;

                    for(var i=0;i<percentage_labels.length;i++){
                        var yPos = chart_y0 + grid_height - i*grid_height/percentage_labels.length;
                        var strokeWidth = 1;
                        if(percentage_labels[i]==0){
                            strokeWidth = 3;
                        }
                        paper_chart.text(chart_x0-20,yPos ,percentage_labels[i]+"%").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                        paper_chart.path('M '+ chart_x0 + ' ' + yPos + ' L ' + CHART_WIDTH + ' ' + yPos).attr({'stroke':GRID_LINE_COLOR,'stroke-width':strokeWidth});
                    }

                    paper_chart.text(chart_x0-40,grid_height/2 ,"Percentage").attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"}).rotate("-90");

                    var grid_content_width = CHART_WIDTH - chart_x0 - 20;
                    var  chart_content_x0 = chart_x0+10;
                    var grid_label_gap = grid_content_width/TIME_LABELS_COUNT;


                    //Drawing the data
                    var minTime,maxTime;
                    for(i=0;i<data.length;i++){
                        var records =  data[i].records;
                        for(var j=0;j<records.length;j++){
                            if (minTime == undefined) {
                                minTime = records[j].time
                            } else if(minTime > records[j].time) {
                                minTime = records[j].time;
                            }

                            if (maxTime == undefined) {
                                maxTime = records[j].time
                            } else if(maxTime < records[j].time) {
                                maxTime = records[j].time;
                            }
                        }
                    }
                    var timeDif = maxTime - minTime;
                    if(timeDif < 4*60*1000){
                        //upset case
                    }else{

                    }
                    var timeGap = timeDif/TIME_LABELS_COUNT;

                    var labelTime = minTime;
                    var index = 0;
                    while(labelTime<maxTime){
                        labelTime += timeGap;
                        if(index != 0){
                            paper_chart.text(chart_content_x0 + index*grid_label_gap,chart_y0 + grid_height,labelTime).attr({"font-size":10,fill:LEGEND_FONT_COLOR,"stroke":"none"});
                        }
                        index++;
                    }

                }
            });
        }
);


</script>