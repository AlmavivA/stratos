<%
(function(){
    var log = new Log("controller.cartridgeSubscribeSubmit");
    var utils = require('/util/utility.jag');
    var jsonRequest = {};
    jsonRequest = {};
    var cartridgeType = request.getParameter('cartridgeType');
    var alias = request.getParameter('alias');
    var repoURL = request.getParameter('repoURL');
    var isPublicRepo = request.getParameter('isPublicRepo');
    var repoUsername = request.getParameter('repoUsername');
    var repoPassword = request.getParameter('repoPassword');
    var autoscalePolicy = request.getParameter('autoscalePolicy');
    var deploymentPolicy = request.getParameter('deploymentPolicy');
    var size = request.getParameter('size');
    var removeontermination = request.getParameter('removeOnUnsubscription');
    var persistencerequired = request.getParameter('persistencerequired');

    if(persistencerequired == "on"){
        persistencerequired = true;
    } else {
        persistencerequired = false;
    }

    if(removeontermination == "on"){
        removeontermination = true;
    } else {
        removeontermination = false;
    }
    // constructing the json request
    jsonRequest.cartridgeType = cartridgeType;
    jsonRequest.alias = alias;
    jsonRequest.repoURL = repoURL;
    jsonRequest.privateRepo = !isPublicRepo;
    if(!isPublicRepo){
        jsonRequest.repoUsername = repoUsername;
        jsonRequest.repoPassword = repoPassword;

    }
    jsonRequest.autoscalePolicy = autoscalePolicy;
    jsonRequest.deploymentPolicy = deploymentPolicy;
    jsonRequest.size = size;
    jsonRequest.persistanceRequired = persistencerequired;
    jsonRequest.removeOnTermination = removeontermination;


    var result = utils.consoleAppUtil.subscribeToCartridge(jsonRequest);
    response.sendRedirect(request.getContextPath() + '/index.jag');
}());
%>