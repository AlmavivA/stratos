/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.wso2.stratos.throttling.manager.dataobjects.*;
import org.wso2.stratos.billing.mgt.dataobjects.*;
import org.wso2.stratos.common.constants.*;


rule clearRestrictions
when
$dataContext : ThrottlingDataContext();
eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) < 8)

then

ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION,
            false, null);

end


rule restrictFileSize
when
$dataContext : ThrottlingDataContext();
eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY) > 8 &&
                            $dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY)  < 10)

then

ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION,
            true, "Your data is big. Bigger than 8");

end

rule stranageTest1Rule
when
$package: MultitenancyPackage(name == "test1")
$dataContext : ThrottlingDataContext()
eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY)  > 15 &&
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)

then

ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION,
            true, "the strange condition for test1 is met");

end

rule strangeTest2Rule
when
$package: MultitenancyPackage(name == "test2")
$dataContext : ThrottlingDataContext()
eval($dataContext.getDataLong(ThrottlingDataEntryConstants.TENANT_CAPACITY)  > 15 &&
            $dataContext.getDataObject(ThrottlingDataEntryConstants.PACKAGE) == $package)
then
ThrottlingAccessValidation validation = $dataContext.getAccessValidation();
validation.setTenantBlocked(StratosConstants.THROTTLING_IN_DATA_ACTION,
            true, "the strange condition for test2 is met");

end
