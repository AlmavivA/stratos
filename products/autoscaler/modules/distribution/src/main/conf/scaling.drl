/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.stratos.messaging.domain.topology.Service;
import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.AutoscalerContext;
import org.apache.stratos.autoscaler.MemberStatsContext;
import org.apache.stratos.autoscaler.Constants;
import org.apache.stratos.autoscaler.NetworkPartitionContext;
import org.apache.stratos.autoscaler.policy.PolicyManager;
import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
import org.apache.stratos.autoscaler.policy.model.RequestsInFlight;
import org.apache.stratos.autoscaler.policy.model.LoadThresholds;
import org.apache.stratos.autoscaler.policy.model.MemoryConsumption;
import org.apache.stratos.autoscaler.policy.model.LoadAverage;
import org.apache.stratos.autoscaler.client.cloud.controller.CloudControllerClient;
import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;
import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;
import org.apache.stratos.autoscaler.algorithm.RoundRobin;
import org.apache.stratos.autoscaler.PartitionContext;
import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
import org.apache.stratos.autoscaler.partition.PartitionGroup;
import org.apache.stratos.cloud.controller.deployment.partition.Partition;
import org.apache.stratos.cloud.controller.pojo.MemberContext;

import org.apache.stratos.autoscaler.policy.model.LoadAverage
import org.apache.stratos.autoscaler.policy.model.MemoryConsumption

global org.apache.stratos.autoscaler.rule.RuleLog log;
global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;
global org.apache.stratos.autoscaler.policy.model.AutoscalePolicy autoscalePolicy;
global java.lang.String clusterId;
global java.lang.String lbRef;
global java.lang.Boolean rifReset;
global java.lang.Boolean mcReset;
global java.lang.Boolean laReset;


rule "Scale-up Rule"
dialect "mvel"
	when
        $networkPartitionContext : NetworkPartitionContext ()

        $loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()
	    algorithmName : String() from $networkPartitionContext.getPartitionAlgorithm();
        autoscaleAlgorithm : AutoscaleAlgorithm() from  $delegator.getAutoscaleAlgorithm(algorithmName)

        eval(log.debug("Running scale up rule: [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm name: " + algorithmName))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm: " + autoscaleAlgorithm))


        rifAverage : Float() from  $networkPartitionContext.getAverageRequestsInFlight()
        rifGradient : Float() from  $networkPartitionContext.getRequestsInFlightGradient()
        rifSecondDerivative : Float() from  $networkPartitionContext.getRequestsInFlightSecondDerivative()
        rifAverageLimit : Float() from  $loadThresholds.getRequestsInFlight().getAverage()
	    rifPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)

        memoryConsumptionAverage : Float() from  $networkPartitionContext.getAverageMemoryConsumption()
        memoryConsumptionGradient : Float() from  $networkPartitionContext.getMemoryConsumptionGradient()
        memoryConsumptionSecondDerivative : Float() from  $networkPartitionContext.getMemoryConsumptionSecondDerivative()
        mcAverageLimit : Float() from  $loadThresholds.getMemoryConsumption().getAverage()
	    mcPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(memoryConsumptionAverage, memoryConsumptionGradient, memoryConsumptionSecondDerivative, 1)

        loadAverageAverage : Float() from  $networkPartitionContext.getAverageLoadAverage()
        loadAverageGradient : Float() from  $networkPartitionContext.getLoadAverageGradient()
        loadAverageSecondDerivative : Float() from  $networkPartitionContext.getLoadAverageSecondDerivative()
        laAverageLimit : Float() from  $loadThresholds.getLoadAverage().getAverage()
	    laPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(loadAverageAverage, loadAverageGradient, loadAverageSecondDerivative, 1)

        scaleUpAction : Boolean() from ((rifReset && (rifPredictedValue > rifAverageLimit * $delegator.SCALE_UP_FACTOR)) || (mcReset && (mcPredictedValue > mcAverageLimit * $delegator.SCALE_UP_FACTOR)) || (laReset && (laPredictedValue > laAverageLimit * $delegator.SCALE_UP_FACTOR)))

        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " RIF predicted value: " + rifPredictedValue))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " RIF average limit: " + rifAverageLimit))

        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " MC predicted value: " + mcPredictedValue))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " MC average limit: " + mcAverageLimit))

        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " LA predicted value: " + laPredictedValue))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " LA Average limit: " + laAverageLimit))

        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Scale-up factor: " + $delegator.SCALE_UP_FACTOR))
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Scale-up action: " + scaleUpAction))

        eval(scaleUpAction)

        partition :  Partition() from autoscaleAlgorithm.getNextScaleUpPartition($networkPartitionContext, clusterId)
        eval(log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " Partition is null: " + (partition == null)))
        eval(partition != null)

	then
        log.debug("[scale-up] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] " + clusterId + " Scaling up cluster");
        $delegator.delegateSpawn($networkPartitionContext.getPartitionCtxt(partition.getId()), clusterId, lbRef);
end


rule "Scaler-down Rule"
dialect "mvel"
	when
        $networkPartitionContext : NetworkPartitionContext ()

        $loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()
        algorithmName : String() from $networkPartitionContext.getPartitionAlgorithm();
        autoscaleAlgorithm : AutoscaleAlgorithm() from  $delegator.getAutoscaleAlgorithm(algorithmName)

        eval(log.debug("Running scale down rule: [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm name: " + algorithmName))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm: " + autoscaleAlgorithm))

        rifAverage : Float() from  $networkPartitionContext.getAverageRequestsInFlight()
        rifGradient : Float() from  $networkPartitionContext.getRequestsInFlightGradient()
        rifSecondDerivative : Float() from  $networkPartitionContext.getRequestsInFlightSecondDerivative()
        rifAverageLimit : Float() from  $loadThresholds.getRequestsInFlight().getAverage()
        rifPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)

        memoryConsumptionAverage : Float() from  $networkPartitionContext.getAverageMemoryConsumption()
        memoryConsumptionGradient : Float() from  $networkPartitionContext.getMemoryConsumptionGradient()
        memoryConsumptionSecondDerivative : Float() from  $networkPartitionContext.getMemoryConsumptionSecondDerivative()
        mcAverageLimit : Float() from  $loadThresholds.getMemoryConsumption().getAverage()
        mcPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(memoryConsumptionAverage, memoryConsumptionGradient, memoryConsumptionSecondDerivative, 1)

        loadAverageAverage : Float() from  $networkPartitionContext.getAverageLoadAverage()
        loadAverageGradient : Float() from  $networkPartitionContext.getLoadAverageGradient()
        loadAverageSecondDerivative : Float() from  $networkPartitionContext.getLoadAverageSecondDerivative()
        laAverageLimit : Float() from  $loadThresholds.getLoadAverage().getAverage()
        laPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(loadAverageAverage, loadAverageGradient, loadAverageSecondDerivative, 1)

        scaleDownAction : Boolean() from ((rifReset && (rifPredictedValue < rifAverageLimit * $delegator.SCALE_DOWN_FACTOR)) || (mcReset && (mcPredictedValue < mcAverageLimit * $delegator.SCALE_DOWN_FACTOR)) || (laReset && (laPredictedValue < laAverageLimit * $delegator.SCALE_DOWN_FACTOR)))

        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " RIF predicted value: " + rifPredictedValue))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " RIF average limit: " + rifAverageLimit))

        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " MC predicted value: " + mcPredictedValue))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " MC average limit: " + mcAverageLimit))

        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " LA predicted value: " + laPredictedValue))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " LA Average limit: " + laAverageLimit))

        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Scale-down factor: " + $delegator.SCALE_DOWN_FACTOR))
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Scale-down action: " + scaleDownAction))

        eval(scaleDownAction)

        partition :  Partition() from autoscaleAlgorithm.getNextScaleDownPartition($networkPartitionContext, clusterId)
        eval(partition != null)
        eval(log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " Partition is null: " + (partition == null)))

	then

        MemberStatsContext selectedMemberStatsContext = null;
        double lowestOverallLoad = 0.0;
        boolean foundAValue = false;
        for(PartitionContext partitionContext : $networkPartitionContext.getPartitionCtxts().values()){
            for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){

                LoadAverage loadAverage = memberStatsContext.getLoadAverage();
                log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [cluster] "
                    + clusterId + " [member] " + memberStatsContext.getMemberId() + " Load average: " + loadAverage);

                MemoryConsumption memoryConsumption = memberStatsContext.getMemoryConsumption();
                log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] "
                    + clusterId + " [member] " + memberStatsContext.getMemberId() + " Memory consumption: " + memoryConsumption);

                double predictedCpu = $delegator.getPredictedValueForNextMinute(loadAverage.getAverage(),loadAverage.getGradient(),loadAverage.getSecondDerivative(), 1);
                log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] "
                    + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted CPU: " + predictedCpu);

                double predictedMemoryConsumption = $delegator.getPredictedValueForNextMinute(memoryConsumption.getAverage(),memoryConsumption.getGradient(),memoryConsumption.getSecondDerivative(), 1);
                log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] "
                    + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted memory consumption: " + predictedMemoryConsumption);

                double overallLoad = (predictedCpu + predictedMemoryConsumption) / 2;
                log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] "
                    + clusterId + " [member] " + memberStatsContext.getMemberId() + " Overall load: " + overallLoad);

                if(!foundAValue){
                    foundAValue = true;
                    selectedMemberStatsContext = memberStatsContext;
                    lowestOverallLoad = overallLoad;
                } else if(overallLoad < lowestOverallLoad){
                    selectedMemberStatsContext = memberStatsContext;
                    lowestOverallLoad = overallLoad;
                }

                if(selectedMemberStatsContext != null) {
                    log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] "
                        + clusterId + " Member with lowest overall load: " + memberStatsContext.getMemberId());
                }
            }
        }
        if(selectedMemberStatsContext != null) {
            log.debug("[scale-down] [network-partition] " + $networkPartitionContext.getId() + " [partition] " + partition.getId() + " [cluster] " + clusterId
                + " Terminating member: " + selectedMemberStatsContext.getMemberId());
            $delegator.delegateTerminate(selectedMemberStatsContext.getMemberId());
        }
end


